"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bytemd";
exports.ids = ["vendor-chunks/bytemd"];
exports.modules = {

/***/ "(ssr)/./node_modules/bytemd/dist/index.css":
/*!********************************************!*\
  !*** ./node_modules/bytemd/dist/index.css ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"657e9ee0af24\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnl0ZW1kL2Rpc3QvaW5kZXguY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGV0dHljb2RlLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2J5dGVtZC9kaXN0L2luZGV4LmNzcz8yMDI5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNjU3ZTllZTBhZjI0XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytemd/dist/index.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/bytemd/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/bytemd/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   Viewer: () => (/* binding */ Viewer),\n/* harmony export */   getProcessor: () => (/* binding */ getProcessor)\n/* harmony export */ });\n/* harmony import */ var codemirror_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror-ssr */ \"(ssr)/./node_modules/codemirror-ssr/lib/codemirror.js\");\n/* harmony import */ var codemirror_ssr_addon_display_placeholder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! codemirror-ssr/addon/display/placeholder.js */ \"(ssr)/./node_modules/codemirror-ssr/addon/display/placeholder.js\");\n/* harmony import */ var codemirror_ssr_addon_edit_continuelist_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! codemirror-ssr/addon/edit/continuelist.js */ \"(ssr)/./node_modules/codemirror-ssr/addon/edit/continuelist.js\");\n/* harmony import */ var codemirror_ssr_addon_mode_overlay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! codemirror-ssr/addon/mode/overlay.js */ \"(ssr)/./node_modules/codemirror-ssr/addon/mode/overlay.js\");\n/* harmony import */ var codemirror_ssr_mode_gfm_gfm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! codemirror-ssr/mode/gfm/gfm.js */ \"(ssr)/./node_modules/codemirror-ssr/mode/gfm/gfm.js\");\n/* harmony import */ var codemirror_ssr_mode_markdown_markdown_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! codemirror-ssr/mode/markdown/markdown.js */ \"(ssr)/./node_modules/codemirror-ssr/mode/markdown/markdown.js\");\n/* harmony import */ var codemirror_ssr_mode_xml_xml_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! codemirror-ssr/mode/xml/xml.js */ \"(ssr)/./node_modules/codemirror-ssr/mode/xml/xml.js\");\n/* harmony import */ var codemirror_ssr_mode_yaml_frontmatter_yaml_frontmatter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! codemirror-ssr/mode/yaml-frontmatter/yaml-frontmatter.js */ \"(ssr)/./node_modules/codemirror-ssr/mode/yaml-frontmatter/yaml-frontmatter.js\");\n/* harmony import */ var codemirror_ssr_mode_yaml_yaml_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! codemirror-ssr/mode/yaml/yaml.js */ \"(ssr)/./node_modules/codemirror-ssr/mode/yaml/yaml.js\");\n/* harmony import */ var select_files__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! select-files */ \"(ssr)/./node_modules/select-files/dist/index.esm.js\");\n/* harmony import */ var word_count__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! word-count */ \"(ssr)/./node_modules/word-count/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n/* harmony import */ var hast_util_sanitize__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! hast-util-sanitize */ \"(ssr)/./node_modules/hast-util-sanitize/lib/schema.js\");\n/* harmony import */ var rehype_raw__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rehype-raw */ \"(ssr)/./node_modules/rehype-raw/index.js\");\n/* harmony import */ var rehype_sanitize__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rehype-sanitize */ \"(ssr)/./node_modules/rehype-sanitize/index.js\");\n/* harmony import */ var rehype_stringify__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rehype-stringify */ \"(ssr)/./node_modules/rehype-stringify/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! lodash-es */ \"(ssr)/./node_modules/lodash-es/throttle.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst index = \"\";\nfunction noop() {\n}\nfunction run(fn) {\n  return fn();\n}\nfunction blank_object() {\n  return /* @__PURE__ */ Object.create(null);\n}\nfunction run_all(fns) {\n  fns.forEach(run);\n}\nfunction is_function(thing) {\n  return typeof thing === \"function\";\n}\nfunction safe_not_equal(a, b) {\n  return a != a ? b == b : a !== b || (a && typeof a === \"object\" || typeof a === \"function\");\n}\nfunction not_equal(a, b) {\n  return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n  return Object.keys(obj).length === 0;\n}\nfunction append(target, node) {\n  target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n  target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\nfunction destroy_each(iterations, detaching) {\n  for (let i = 0; i < iterations.length; i += 1) {\n    if (iterations[i])\n      iterations[i].d(detaching);\n  }\n}\nfunction element(name) {\n  return document.createElement(name);\n}\nfunction text(data) {\n  return document.createTextNode(data);\n}\nfunction empty() {\n  return text(\"\");\n}\nfunction listen(node, event, handler, options) {\n  node.addEventListener(event, handler, options);\n  return () => node.removeEventListener(event, handler, options);\n}\nfunction self(fn) {\n  return function(event) {\n    if (event.target === this)\n      fn.call(this, event);\n  };\n}\nfunction attr(node, attribute, value) {\n  if (value == null)\n    node.removeAttribute(attribute);\n  else if (node.getAttribute(attribute) !== value)\n    node.setAttribute(attribute, value);\n}\nfunction children(element2) {\n  return Array.from(element2.childNodes);\n}\nfunction set_data(text2, data) {\n  data = \"\" + data;\n  if (text2.wholeText !== data)\n    text2.data = data;\n}\nfunction toggle_class(element2, name, toggle) {\n  element2.classList[toggle ? \"add\" : \"remove\"](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n  const e = document.createEvent(\"CustomEvent\");\n  e.initCustomEvent(type, bubbles, cancelable, detail);\n  return e;\n}\nlet current_component;\nfunction set_current_component(component) {\n  current_component = component;\n}\nfunction get_current_component() {\n  if (!current_component)\n    throw new Error(\"Function called outside component initialization\");\n  return current_component;\n}\nfunction onMount(fn) {\n  get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n  get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n  get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n  const component = get_current_component();\n  return (type, detail, { cancelable = false } = {}) => {\n    const callbacks = component.$$.callbacks[type];\n    if (callbacks) {\n      const event = custom_event(type, detail, { cancelable });\n      callbacks.slice().forEach((fn) => {\n        fn.call(component, event);\n      });\n      return !event.defaultPrevented;\n    }\n    return true;\n  };\n}\nconst dirty_components = [];\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n  if (!update_scheduled) {\n    update_scheduled = true;\n    resolved_promise.then(flush);\n  }\n}\nfunction tick() {\n  schedule_update();\n  return resolved_promise;\n}\nfunction add_render_callback(fn) {\n  render_callbacks.push(fn);\n}\nconst seen_callbacks = /* @__PURE__ */ new Set();\nlet flushidx = 0;\nfunction flush() {\n  if (flushidx !== 0) {\n    return;\n  }\n  const saved_component = current_component;\n  do {\n    try {\n      while (flushidx < dirty_components.length) {\n        const component = dirty_components[flushidx];\n        flushidx++;\n        set_current_component(component);\n        update(component.$$);\n      }\n    } catch (e) {\n      dirty_components.length = 0;\n      flushidx = 0;\n      throw e;\n    }\n    set_current_component(null);\n    dirty_components.length = 0;\n    flushidx = 0;\n    while (binding_callbacks.length)\n      binding_callbacks.pop()();\n    for (let i = 0; i < render_callbacks.length; i += 1) {\n      const callback = render_callbacks[i];\n      if (!seen_callbacks.has(callback)) {\n        seen_callbacks.add(callback);\n        callback();\n      }\n    }\n    render_callbacks.length = 0;\n  } while (dirty_components.length);\n  while (flush_callbacks.length) {\n    flush_callbacks.pop()();\n  }\n  update_scheduled = false;\n  seen_callbacks.clear();\n  set_current_component(saved_component);\n}\nfunction update($$) {\n  if ($$.fragment !== null) {\n    $$.update();\n    run_all($$.before_update);\n    const dirty = $$.dirty;\n    $$.dirty = [-1];\n    $$.fragment && $$.fragment.p($$.ctx, dirty);\n    $$.after_update.forEach(add_render_callback);\n  }\n}\nfunction flush_render_callbacks(fns) {\n  const filtered = [];\n  const targets = [];\n  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n  targets.forEach((c) => c());\n  render_callbacks = filtered;\n}\nconst outroing = /* @__PURE__ */ new Set();\nlet outros;\nfunction group_outros() {\n  outros = {\n    r: 0,\n    c: [],\n    p: outros\n    // parent group\n  };\n}\nfunction check_outros() {\n  if (!outros.r) {\n    run_all(outros.c);\n  }\n  outros = outros.p;\n}\nfunction transition_in(block, local) {\n  if (block && block.i) {\n    outroing.delete(block);\n    block.i(local);\n  }\n}\nfunction transition_out(block, local, detach2, callback) {\n  if (block && block.o) {\n    if (outroing.has(block))\n      return;\n    outroing.add(block);\n    outros.c.push(() => {\n      outroing.delete(block);\n      if (callback) {\n        if (detach2)\n          block.d(1);\n        callback();\n      }\n    });\n    block.o(local);\n  } else if (callback) {\n    callback();\n  }\n}\nfunction create_component(block) {\n  block && block.c();\n}\nfunction mount_component(component, target, anchor, customElement) {\n  const { fragment, after_update } = component.$$;\n  fragment && fragment.m(target, anchor);\n  if (!customElement) {\n    add_render_callback(() => {\n      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n      if (component.$$.on_destroy) {\n        component.$$.on_destroy.push(...new_on_destroy);\n      } else {\n        run_all(new_on_destroy);\n      }\n      component.$$.on_mount = [];\n    });\n  }\n  after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n  const $$ = component.$$;\n  if ($$.fragment !== null) {\n    flush_render_callbacks($$.after_update);\n    run_all($$.on_destroy);\n    $$.fragment && $$.fragment.d(detaching);\n    $$.on_destroy = $$.fragment = null;\n    $$.ctx = [];\n  }\n}\nfunction make_dirty(component, i) {\n  if (component.$$.dirty[0] === -1) {\n    dirty_components.push(component);\n    schedule_update();\n    component.$$.dirty.fill(0);\n  }\n  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;\n}\nfunction init(component, options, instance2, create_fragment2, not_equal2, props, append_styles, dirty = [-1]) {\n  const parent_component = current_component;\n  set_current_component(component);\n  const $$ = component.$$ = {\n    fragment: null,\n    ctx: [],\n    // state\n    props,\n    update: noop,\n    not_equal: not_equal2,\n    bound: blank_object(),\n    // lifecycle\n    on_mount: [],\n    on_destroy: [],\n    on_disconnect: [],\n    before_update: [],\n    after_update: [],\n    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n    // everything else\n    callbacks: blank_object(),\n    dirty,\n    skip_bound: false,\n    root: options.target || parent_component.$$.root\n  };\n  append_styles && append_styles($$.root);\n  let ready = false;\n  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {\n    const value = rest.length ? rest[0] : ret;\n    if ($$.ctx && not_equal2($$.ctx[i], $$.ctx[i] = value)) {\n      if (!$$.skip_bound && $$.bound[i])\n        $$.bound[i](value);\n      if (ready)\n        make_dirty(component, i);\n    }\n    return ret;\n  }) : [];\n  $$.update();\n  ready = true;\n  run_all($$.before_update);\n  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;\n  if (options.target) {\n    if (options.hydrate) {\n      const nodes = children(options.target);\n      $$.fragment && $$.fragment.l(nodes);\n      nodes.forEach(detach);\n    } else {\n      $$.fragment && $$.fragment.c();\n    }\n    if (options.intro)\n      transition_in(component.$$.fragment);\n    mount_component(component, options.target, options.anchor, options.customElement);\n    flush();\n  }\n  set_current_component(parent_component);\n}\nclass SvelteComponent {\n  $destroy() {\n    destroy_component(this, 1);\n    this.$destroy = noop;\n  }\n  $on(type, callback) {\n    if (!is_function(callback)) {\n      return noop;\n    }\n    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n    callbacks.push(callback);\n    return () => {\n      const index2 = callbacks.indexOf(callback);\n      if (index2 !== -1)\n        callbacks.splice(index2, 1);\n    };\n  }\n  $set($$props) {\n    if (this.$$set && !is_empty($$props)) {\n      this.$$.skip_bound = true;\n      this.$$set($$props);\n      this.$$.skip_bound = false;\n    }\n  }\n}\nconst bold = \"Bold\";\nconst boldText = \"bold text\";\nconst cheatsheet = \"Markdown Cheatsheet\";\nconst closeHelp = \"Close help\";\nconst closeToc = \"Close table of contents\";\nconst code = \"Code\";\nconst codeBlock = \"Code block\";\nconst codeLang = \"lang\";\nconst codeText = \"code\";\nconst exitFullscreen = \"Exit fullscreen\";\nconst exitPreviewOnly = \"Exit preview only\";\nconst exitWriteOnly = \"Exit write only\";\nconst fullscreen = \"Fullscreen\";\nconst h1 = \"Heading 1\";\nconst h2 = \"Heading 2\";\nconst h3 = \"Heading 3\";\nconst h4 = \"Heading 4\";\nconst h5 = \"Heading 5\";\nconst h6 = \"Heading 6\";\nconst headingText = \"heading\";\nconst help = \"Help\";\nconst hr = \"Horizontal rule\";\nconst image = \"Image\";\nconst imageAlt = \"alt\";\nconst imageTitle = \"title\";\nconst italic = \"Italic\";\nconst italicText = \"italic text\";\nconst limited = \"The maximum character limit has been reached\";\nconst lines = \"Lines\";\nconst link = \"Link\";\nconst linkText = \"link text\";\nconst ol = \"Ordered list\";\nconst olItem = \"item\";\nconst preview = \"Preview\";\nconst previewOnly = \"Preview only\";\nconst quote = \"Quote\";\nconst quotedText = \"quoted text\";\nconst shortcuts = \"Shortcuts\";\nconst source = \"Source code\";\nconst sync = \"Scroll sync\";\nconst toc = \"Table of contents\";\nconst top = \"Scroll to top\";\nconst ul = \"Unordered list\";\nconst ulItem = \"item\";\nconst words = \"Words\";\nconst write = \"Write\";\nconst writeOnly = \"Write only\";\nconst en = {\n  bold,\n  boldText,\n  cheatsheet,\n  closeHelp,\n  closeToc,\n  code,\n  codeBlock,\n  codeLang,\n  codeText,\n  exitFullscreen,\n  exitPreviewOnly,\n  exitWriteOnly,\n  fullscreen,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  headingText,\n  help,\n  hr,\n  image,\n  imageAlt,\n  imageTitle,\n  italic,\n  italicText,\n  limited,\n  lines,\n  link,\n  linkText,\n  ol,\n  olItem,\n  preview,\n  previewOnly,\n  quote,\n  quotedText,\n  shortcuts,\n  source,\n  sync,\n  toc,\n  top,\n  ul,\n  ulItem,\n  words,\n  write,\n  writeOnly\n};\nconst icons = {\n  Close: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"m8 8 32 32M8 40 40 8\"/></svg>',\n  H: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M12 5v38M36 5v38M12 24h24\"/></svg>',\n  H1: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M6 8v32M25 8v32M6 24h19M34.226 24 39 19.017V40\"/></svg>',\n  H2: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M6 8v32M24 8v32M7 24h16M32 25c0-3.167 2.667-5 5-5s5 1.833 5 5c0 5.7-10 9.933-10 15h10\"/></svg>',\n  H3: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M6 8v32M24 8v32M7 24h16M32 20h10l-7 9c4 0 7 2 7 6s-3 5-5 5c-2.381 0-4-1-5-2.1\"/></svg>',\n  LevelFourTitle: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M6 8v32M24 8v32M7 24h16M39.977 40V20L31 32.997v2.023h12\"/></svg>',\n  LevelFiveTitle: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M6 8v32M24 8v32M7 24h16M40 21.01h-8v7.024C32 28 34 27 37 27s4 2.534 4 6.5-1 6.5-5 6.5c-3 0-4-2-4-3.992\"/></svg>',\n  LevelSixTitle: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M6 8v32M24 8v32M7 24h16\"/><path stroke=\"currentColor\" stroke-width=\"4\" d=\"M36.5 40a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M41.596 24.74C40.778 22.545 38.804 21 36.5 21c-3.038 0-5.5 2.686-5.5 6v7\"/></svg>',\n  TextBold: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M24 24c5.506 0 9.969-4.477 9.969-10S29.506 4 24 4H11v20h13ZM28.031 44C33.537 44 38 39.523 38 34s-4.463-10-9.969-10H11v20h17.031Z\" clip-rule=\"evenodd\"/></svg>',\n  TextItalic: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M20 6h16M12 42h16M29 5.952 19 42\"/></svg>',\n  Quote: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M18.853 9.116C11.323 13.952 7.14 19.58 6.303 26.003 5 36 13.94 40.893 18.47 36.497 23 32.1 20.285 26.52 17.005 24.994c-3.28-1.525-5.286-.994-4.936-3.033.35-2.038 5.016-7.69 9.116-10.322a.749.749 0 0 0 .114-1.02L20.285 9.3c-.44-.572-.862-.55-1.432-.185ZM38.679 9.116c-7.53 4.836-11.714 10.465-12.55 16.887-1.303 9.997 7.637 14.89 12.167 10.494 4.53-4.397 1.815-9.977-1.466-11.503-3.28-1.525-5.286-.994-4.936-3.033.35-2.038 5.017-7.69 9.117-10.322a.749.749 0 0 0 .113-1.02L40.11 9.3c-.44-.572-.862-.55-1.431-.185Z\" clip-rule=\"evenodd\"/></svg>',\n  LinkOne: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"m26.24 16.373-9.14-9.14c-2.661-2.661-7.035-2.603-9.768.131-2.734 2.734-2.793 7.107-.131 9.768l7.935 7.936M32.903 23.003l7.935 7.935c2.661 2.662 2.603 7.035-.13 9.769-2.735 2.734-7.108 2.792-9.77.13l-9.14-9.14\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M26.11 26.142c2.733-2.734 2.792-7.108.13-9.769M21.799 21.798c-2.734 2.734-2.792 7.108-.131 9.769\"/></svg>',\n  Pic: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M5 10a2 2 0 0 1 2-2h34a2 2 0 0 1 2 2v28a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V10Z\" clip-rule=\"evenodd\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M14.5 18a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z\" clip-rule=\"evenodd\"/><path stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"m15 24 5 4 6-7 17 13v4a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-4l10-10Z\"/></svg>',\n  Code: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M16 13 4 25.432 16 37M32 13l12 12.432L32 37\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"4\" d=\"m28 4-7 40\"/></svg>',\n  CodeBrackets: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M16 4c-2 0-5 1-5 5v9c0 3-5 5-5 5s5 2 5 5v11c0 4 3 5 5 5M32 4c2 0 5 1 5 5v9c0 3 5 5 5 5s-5 2-5 5v11c0 4-3 5-5 5\"/></svg>',\n  ListTwo: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M9 42a4 4 0 1 0 0-8 4 4 0 0 0 0 8ZM9 14a4 4 0 1 0 0-8 4 4 0 0 0 0 8ZM9 28a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M21 24h22M21 38h22M21 10h22\"/></svg>',\n  OrderedList: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M9 4v9M12 13H6M12 27H6M6 20s3-3 5 0-5 7-5 7M6 34.5s2-3 5-1 0 4.5 0 4.5 3 2.5 0 4.5-5-1-5-1M11 38H9M9 4 6 6M21 24h22M21 38h22M21 10h22\"/></svg>',\n  DividingLine: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M5 24h38M21 38h6M37 38h6M21 10h6M5 38h6M5 10h6M37 10h6\"/></svg>',\n  AlignTextLeftOne: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M39 6H9a3 3 0 0 0-3 3v30a3 3 0 0 0 3 3h30a3 3 0 0 0 3-3V9a3 3 0 0 0-3-3Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M26 24H14M34 15H14M32 33H14\"/></svg>',\n  Helpcenter: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M39 6H9a3 3 0 0 0-3 3v30a3 3 0 0 0 3 3h30a3 3 0 0 0 3-3V9a3 3 0 0 0-3-3Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M24 28.625v-4a6 6 0 1 0-6-6\"/><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M24 37.625a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z\" clip-rule=\"evenodd\"/></svg>',\n  LeftExpand: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><rect width=\"28\" height=\"36\" x=\"6\" y=\"6\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" rx=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M42 6v36\"/></svg>',\n  RightExpand: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><rect width=\"28\" height=\"36\" x=\"14\" y=\"6\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" rx=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M6 6v36\"/></svg>',\n  OffScreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M33 6v9h9M15 6v9H6M15 42v-9H6M33 42v-9h8.9\"/></svg>',\n  FullScreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"4\" d=\"M33 6h9v9M42 33v9h-9M15 42H6v-9M6 15V6h9\"/></svg>',\n  GithubOne: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"none\" viewBox=\"0 0 48 48\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"4\" d=\"M29.344 30.477c2.404-.5 4.585-1.366 6.28-2.638C38.52 25.668 40 22.314 40 19c0-2.324-.881-4.494-2.407-6.332-.85-1.024 1.636-8.667-.573-7.638-2.21 1.03-5.45 3.308-7.147 2.805A20.712 20.712 0 0 0 24 7c-1.8 0-3.532.223-5.147.634C16.505 8.232 14.259 6 12 5.03c-2.26-.97-1.026 6.934-1.697 7.765C8.84 14.605 8 16.73 8 19c0 3.314 1.79 6.668 4.686 8.84 1.93 1.446 4.348 2.368 7.054 2.822M19.74 30.662c-1.159 1.275-1.738 2.486-1.738 3.632v8.717M29.345 30.477c1.097 1.44 1.646 2.734 1.646 3.88v8.654M6 31.215c.899.11 1.566.524 2 1.24.652 1.075 3.074 5.063 5.825 5.063h4.177\"/></svg>'\n};\nfunction createCodeMirror() {\n  const codemirror = (0,codemirror_ssr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n  (0,codemirror_ssr_addon_display_placeholder_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(codemirror);\n  (0,codemirror_ssr_addon_mode_overlay_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(codemirror);\n  (0,codemirror_ssr_mode_xml_xml_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(codemirror);\n  (0,codemirror_ssr_mode_markdown_markdown_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(codemirror);\n  (0,codemirror_ssr_mode_gfm_gfm_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(codemirror);\n  (0,codemirror_ssr_mode_yaml_yaml_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(codemirror);\n  (0,codemirror_ssr_mode_yaml_frontmatter_yaml_frontmatter_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(codemirror);\n  (0,codemirror_ssr_addon_edit_continuelist_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(codemirror);\n  return codemirror;\n}\nfunction createEditorUtils(codemirror, editor) {\n  return {\n    /**\n     * Wrap text with decorators, for example:\n     *\n     * `text -> *text*`\n     */\n    wrapText(before, after = before) {\n      const range = editor.somethingSelected() ? editor.listSelections()[0] : editor.findWordAt(editor.getCursor());\n      const from = range.from();\n      const to = range.to();\n      const text2 = editor.getRange(from, to);\n      const fromBefore = codemirror.Pos(from.line, from.ch - before.length);\n      const toAfter = codemirror.Pos(to.line, to.ch + after.length);\n      if (editor.getRange(fromBefore, from) === before && editor.getRange(to, toAfter) === after) {\n        editor.replaceRange(text2, fromBefore, toAfter);\n        editor.setSelection(\n          fromBefore,\n          codemirror.Pos(fromBefore.line, fromBefore.ch + text2.length)\n        );\n      } else {\n        editor.replaceRange(before + text2 + after, from, to);\n        const cursor = editor.getCursor();\n        editor.setSelection(\n          codemirror.Pos(cursor.line, cursor.ch - after.length - text2.length),\n          codemirror.Pos(cursor.line, cursor.ch - after.length)\n        );\n      }\n    },\n    /**\n     * replace multiple lines\n     *\n     * `line -> # line`\n     */\n    replaceLines(replace) {\n      const [selection] = editor.listSelections();\n      const range = [\n        codemirror.Pos(selection.from().line, 0),\n        codemirror.Pos(selection.to().line)\n      ];\n      const lines2 = editor.getRange(...range).split(\"\\n\");\n      editor.replaceRange(lines2.map(replace).join(\"\\n\"), ...range);\n      editor.setSelection(...range);\n    },\n    /**\n     * Append a block based on the cursor position\n     */\n    appendBlock(content) {\n      const cursor = editor.getCursor();\n      let emptyLine = -1;\n      for (let i = cursor.line; i < editor.lineCount(); i++) {\n        if (!editor.getLine(i).trim()) {\n          emptyLine = i;\n          break;\n        }\n      }\n      if (emptyLine === -1) {\n        editor.replaceRange(\"\\n\", codemirror.Pos(editor.lineCount()));\n        emptyLine = editor.lineCount();\n      }\n      editor.replaceRange(\"\\n\" + content, codemirror.Pos(emptyLine));\n      return codemirror.Pos(emptyLine + 1, 0);\n    },\n    /**\n     * Triggers a virtual file input and let user select files\n     *\n     * https://www.npmjs.com/package/select-files\n     */\n    selectFiles: select_files__WEBPACK_IMPORTED_MODULE_9__[\"default\"]\n  };\n}\nfunction findStartIndex(num, nums) {\n  let startIndex = nums.length - 2;\n  for (let i = 0; i < nums.length; i++) {\n    if (num < nums[i]) {\n      startIndex = i - 1;\n      break;\n    }\n  }\n  startIndex = Math.max(startIndex, 0);\n  return startIndex;\n}\nconst getShortcutWithPrefix = (key, shift = false) => {\n  const shiftPrefix = shift ? \"Shift-\" : \"\";\n  const CmdPrefix = typeof navigator !== \"undefined\" && /Mac/.test(navigator.platform) ? \"Cmd-\" : \"Ctrl-\";\n  return shiftPrefix + CmdPrefix + key;\n};\nasync function handleImageUpload({ editor, appendBlock, codemirror }, uploadImages, files) {\n  const imgs = await uploadImages(files);\n  const pos = appendBlock(\n    imgs.map(({ url, alt, title }, i) => {\n      alt = alt != null ? alt : files[i].name;\n      return `![${alt}](${url}${title ? ` \"${title}\"` : \"\"})`;\n    }).join(\"\\n\\n\")\n  );\n  editor.setSelection(pos, codemirror.Pos(pos.line + imgs.length * 2 - 2));\n  editor.focus();\n}\nfunction getBuiltinActions(locale, plugins, uploadImages) {\n  const leftActions = [\n    {\n      icon: icons.H,\n      handler: {\n        type: \"dropdown\",\n        actions: [1, 2, 3, 4, 5, 6].map((level) => ({\n          title: locale[`h${level}`],\n          icon: [\n            icons.H1,\n            icons.H2,\n            icons.H3,\n            icons.LevelFourTitle,\n            icons.LevelFiveTitle,\n            icons.LevelSixTitle\n          ][level - 1],\n          cheatsheet: level <= 3 ? `${\"#\".repeat(level)} ${locale.headingText}` : void 0,\n          handler: {\n            type: \"action\",\n            click({ replaceLines, editor }) {\n              replaceLines((line) => {\n                line = line.trim().replace(/^#*/, \"\").trim();\n                line = \"#\".repeat(level) + \" \" + line;\n                return line;\n              });\n              editor.focus();\n            }\n          }\n        }))\n      }\n    },\n    {\n      title: locale.bold,\n      icon: icons.TextBold,\n      cheatsheet: `**${locale.boldText}**`,\n      handler: {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"B\"),\n        click({ wrapText, editor }) {\n          wrapText(\"**\");\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.italic,\n      icon: icons.TextItalic,\n      cheatsheet: `*${locale.italicText}*`,\n      handler: {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"I\"),\n        click({ wrapText, editor }) {\n          wrapText(\"*\");\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.quote,\n      icon: icons.Quote,\n      cheatsheet: `> ${locale.quotedText}`,\n      handler: {\n        type: \"action\",\n        click({ replaceLines, editor }) {\n          replaceLines((line) => \"> \" + line);\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.link,\n      icon: icons.LinkOne,\n      cheatsheet: `[${locale.linkText}](url)`,\n      handler: {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"K\"),\n        click({ editor, wrapText, codemirror }) {\n          wrapText(\"[\", \"](url)\");\n          const cursor = editor.getCursor();\n          editor.setSelection(\n            codemirror.Pos(cursor.line, cursor.ch + 2),\n            codemirror.Pos(cursor.line, cursor.ch + 5)\n          );\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.image,\n      icon: icons.Pic,\n      cheatsheet: `![${locale.imageAlt}](url \"${locale.imageTitle}\")`,\n      handler: uploadImages ? {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"I\", true),\n        async click(ctx) {\n          const fileList = await (0,select_files__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n            accept: \"image/*\",\n            multiple: true\n          });\n          if (fileList == null ? void 0 : fileList.length) {\n            await handleImageUpload(ctx, uploadImages, Array.from(fileList));\n          }\n        }\n      } : void 0\n    },\n    {\n      title: locale.code,\n      icon: icons.Code,\n      cheatsheet: \"`\" + locale.codeText + \"`\",\n      handler: {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"K\", true),\n        click({ wrapText, editor }) {\n          wrapText(\"`\");\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.codeBlock,\n      icon: icons.CodeBrackets,\n      cheatsheet: \"```\" + locale.codeLang + \"↵\",\n      handler: {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"C\", true),\n        click({ editor, appendBlock, codemirror }) {\n          const pos = appendBlock(\"```js\\n```\");\n          editor.setSelection(\n            codemirror.Pos(pos.line, 3),\n            codemirror.Pos(pos.line, 5)\n          );\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.ul,\n      icon: icons.ListTwo,\n      cheatsheet: `- ${locale.ulItem}`,\n      handler: {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"U\", true),\n        click({ replaceLines, editor }) {\n          replaceLines((line) => \"- \" + line);\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.ol,\n      icon: icons.OrderedList,\n      cheatsheet: `1. ${locale.olItem}`,\n      handler: {\n        type: \"action\",\n        shortcut: getShortcutWithPrefix(\"O\", true),\n        click({ replaceLines, editor }) {\n          replaceLines((line, i) => `${i + 1}. ${line}`);\n          editor.focus();\n        }\n      }\n    },\n    {\n      title: locale.hr,\n      icon: icons.DividingLine,\n      cheatsheet: \"---\"\n    }\n  ];\n  const rightActions = [];\n  plugins.forEach(({ actions }) => {\n    if (actions) {\n      actions.forEach((action) => {\n        if (!action.position || action.position !== \"right\")\n          leftActions.push(action);\n        else\n          rightActions.unshift(action);\n      });\n    }\n  });\n  return {\n    leftActions,\n    rightActions\n  };\n}\nfunction get_each_context$2(ctx, list, i) {\n  const child_ctx = ctx.slice();\n  child_ctx[5] = list[i];\n  return child_ctx;\n}\nfunction get_each_context_1$1(ctx, list, i) {\n  const child_ctx = ctx.slice();\n  child_ctx[5] = list[i];\n  return child_ctx;\n}\nfunction create_if_block_1$2(ctx) {\n  let li;\n  let div0;\n  let raw_value = (\n    /*action*/\n    ctx[5].icon + \"\"\n  );\n  let div1;\n  let t0_value = (\n    /*action*/\n    ctx[5].title + \"\"\n  );\n  let t0;\n  let div2;\n  let code2;\n  let t1_value = (\n    /*action*/\n    ctx[5].cheatsheet + \"\"\n  );\n  let t1;\n  return {\n    c() {\n      li = element(\"li\");\n      div0 = element(\"div\");\n      div1 = element(\"div\");\n      t0 = text(t0_value);\n      div2 = element(\"div\");\n      code2 = element(\"code\");\n      t1 = text(t1_value);\n      attr(div0, \"class\", \"bytemd-help-icon\");\n      attr(div1, \"class\", \"bytemd-help-title\");\n      attr(div2, \"class\", \"bytemd-help-content\");\n    },\n    m(target, anchor) {\n      insert(target, li, anchor);\n      append(li, div0);\n      div0.innerHTML = raw_value;\n      append(li, div1);\n      append(div1, t0);\n      append(li, div2);\n      append(div2, code2);\n      append(code2, t1);\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*items*/\n      4 && raw_value !== (raw_value = /*action*/\n      ctx2[5].icon + \"\"))\n        div0.innerHTML = raw_value;\n      if (dirty & /*items*/\n      4 && t0_value !== (t0_value = /*action*/\n      ctx2[5].title + \"\"))\n        set_data(t0, t0_value);\n      if (dirty & /*items*/\n      4 && t1_value !== (t1_value = /*action*/\n      ctx2[5].cheatsheet + \"\"))\n        set_data(t1, t1_value);\n    },\n    d(detaching) {\n      if (detaching)\n        detach(li);\n    }\n  };\n}\nfunction create_each_block_1$1(ctx) {\n  let if_block_anchor;\n  let if_block = (\n    /*action*/\n    ctx[5].cheatsheet && create_if_block_1$2(ctx)\n  );\n  return {\n    c() {\n      if (if_block)\n        if_block.c();\n      if_block_anchor = empty();\n    },\n    m(target, anchor) {\n      if (if_block)\n        if_block.m(target, anchor);\n      insert(target, if_block_anchor, anchor);\n    },\n    p(ctx2, dirty) {\n      if (\n        /*action*/\n        ctx2[5].cheatsheet\n      ) {\n        if (if_block) {\n          if_block.p(ctx2, dirty);\n        } else {\n          if_block = create_if_block_1$2(ctx2);\n          if_block.c();\n          if_block.m(if_block_anchor.parentNode, if_block_anchor);\n        }\n      } else if (if_block) {\n        if_block.d(1);\n        if_block = null;\n      }\n    },\n    d(detaching) {\n      if (if_block)\n        if_block.d(detaching);\n      if (detaching)\n        detach(if_block_anchor);\n    }\n  };\n}\nfunction create_if_block$3(ctx) {\n  let li;\n  let div0;\n  let raw_value = (\n    /*action*/\n    ctx[5].icon + \"\"\n  );\n  let div1;\n  let t0_value = (\n    /*action*/\n    ctx[5].title + \"\"\n  );\n  let t0;\n  let div2;\n  let kbd;\n  let t1_value = (\n    /*action*/\n    ctx[5].handler.shortcut + \"\"\n  );\n  let t1;\n  return {\n    c() {\n      li = element(\"li\");\n      div0 = element(\"div\");\n      div1 = element(\"div\");\n      t0 = text(t0_value);\n      div2 = element(\"div\");\n      kbd = element(\"kbd\");\n      t1 = text(t1_value);\n      attr(div0, \"class\", \"bytemd-help-icon\");\n      attr(div1, \"class\", \"bytemd-help-title\");\n      attr(div2, \"class\", \"bytemd-help-content\");\n    },\n    m(target, anchor) {\n      insert(target, li, anchor);\n      append(li, div0);\n      div0.innerHTML = raw_value;\n      append(li, div1);\n      append(div1, t0);\n      append(li, div2);\n      append(div2, kbd);\n      append(kbd, t1);\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*items*/\n      4 && raw_value !== (raw_value = /*action*/\n      ctx2[5].icon + \"\"))\n        div0.innerHTML = raw_value;\n      if (dirty & /*items*/\n      4 && t0_value !== (t0_value = /*action*/\n      ctx2[5].title + \"\"))\n        set_data(t0, t0_value);\n      if (dirty & /*items*/\n      4 && t1_value !== (t1_value = /*action*/\n      ctx2[5].handler.shortcut + \"\"))\n        set_data(t1, t1_value);\n    },\n    d(detaching) {\n      if (detaching)\n        detach(li);\n    }\n  };\n}\nfunction create_each_block$2(ctx) {\n  let if_block_anchor;\n  let if_block = (\n    /*action*/\n    ctx[5].handler && /*action*/\n    ctx[5].handler.type === \"action\" && /*action*/\n    ctx[5].handler.shortcut && create_if_block$3(ctx)\n  );\n  return {\n    c() {\n      if (if_block)\n        if_block.c();\n      if_block_anchor = empty();\n    },\n    m(target, anchor) {\n      if (if_block)\n        if_block.m(target, anchor);\n      insert(target, if_block_anchor, anchor);\n    },\n    p(ctx2, dirty) {\n      if (\n        /*action*/\n        ctx2[5].handler && /*action*/\n        ctx2[5].handler.type === \"action\" && /*action*/\n        ctx2[5].handler.shortcut\n      ) {\n        if (if_block) {\n          if_block.p(ctx2, dirty);\n        } else {\n          if_block = create_if_block$3(ctx2);\n          if_block.c();\n          if_block.m(if_block_anchor.parentNode, if_block_anchor);\n        }\n      } else if (if_block) {\n        if_block.d(1);\n        if_block = null;\n      }\n    },\n    d(detaching) {\n      if (if_block)\n        if_block.d(detaching);\n      if (detaching)\n        detach(if_block_anchor);\n    }\n  };\n}\nfunction create_fragment$5(ctx) {\n  let div;\n  let h20;\n  let t0_value = (\n    /*locale*/\n    ctx[0].cheatsheet + \"\"\n  );\n  let t0;\n  let ul0;\n  let h21;\n  let t1_value = (\n    /*locale*/\n    ctx[0].shortcuts + \"\"\n  );\n  let t1;\n  let ul1;\n  let each_value_1 = (\n    /*items*/\n    ctx[2]\n  );\n  let each_blocks_1 = [];\n  for (let i = 0; i < each_value_1.length; i += 1) {\n    each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));\n  }\n  let each_value = (\n    /*items*/\n    ctx[2]\n  );\n  let each_blocks = [];\n  for (let i = 0; i < each_value.length; i += 1) {\n    each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));\n  }\n  return {\n    c() {\n      div = element(\"div\");\n      h20 = element(\"h2\");\n      t0 = text(t0_value);\n      ul0 = element(\"ul\");\n      for (let i = 0; i < each_blocks_1.length; i += 1) {\n        each_blocks_1[i].c();\n      }\n      h21 = element(\"h2\");\n      t1 = text(t1_value);\n      ul1 = element(\"ul\");\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].c();\n      }\n      attr(div, \"class\", \"bytemd-help\");\n      toggle_class(div, \"bytemd-hidden\", !/*visible*/\n      ctx[1]);\n    },\n    m(target, anchor) {\n      insert(target, div, anchor);\n      append(div, h20);\n      append(h20, t0);\n      append(div, ul0);\n      for (let i = 0; i < each_blocks_1.length; i += 1) {\n        if (each_blocks_1[i]) {\n          each_blocks_1[i].m(ul0, null);\n        }\n      }\n      append(div, h21);\n      append(h21, t1);\n      append(div, ul1);\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        if (each_blocks[i]) {\n          each_blocks[i].m(ul1, null);\n        }\n      }\n    },\n    p(ctx2, [dirty]) {\n      if (dirty & /*locale*/\n      1 && t0_value !== (t0_value = /*locale*/\n      ctx2[0].cheatsheet + \"\"))\n        set_data(t0, t0_value);\n      if (dirty & /*items*/\n      4) {\n        each_value_1 = /*items*/\n        ctx2[2];\n        let i;\n        for (i = 0; i < each_value_1.length; i += 1) {\n          const child_ctx = get_each_context_1$1(ctx2, each_value_1, i);\n          if (each_blocks_1[i]) {\n            each_blocks_1[i].p(child_ctx, dirty);\n          } else {\n            each_blocks_1[i] = create_each_block_1$1(child_ctx);\n            each_blocks_1[i].c();\n            each_blocks_1[i].m(ul0, null);\n          }\n        }\n        for (; i < each_blocks_1.length; i += 1) {\n          each_blocks_1[i].d(1);\n        }\n        each_blocks_1.length = each_value_1.length;\n      }\n      if (dirty & /*locale*/\n      1 && t1_value !== (t1_value = /*locale*/\n      ctx2[0].shortcuts + \"\"))\n        set_data(t1, t1_value);\n      if (dirty & /*items*/\n      4) {\n        each_value = /*items*/\n        ctx2[2];\n        let i;\n        for (i = 0; i < each_value.length; i += 1) {\n          const child_ctx = get_each_context$2(ctx2, each_value, i);\n          if (each_blocks[i]) {\n            each_blocks[i].p(child_ctx, dirty);\n          } else {\n            each_blocks[i] = create_each_block$2(child_ctx);\n            each_blocks[i].c();\n            each_blocks[i].m(ul1, null);\n          }\n        }\n        for (; i < each_blocks.length; i += 1) {\n          each_blocks[i].d(1);\n        }\n        each_blocks.length = each_value.length;\n      }\n      if (dirty & /*visible*/\n      2) {\n        toggle_class(div, \"bytemd-hidden\", !/*visible*/\n        ctx2[1]);\n      }\n    },\n    i: noop,\n    o: noop,\n    d(detaching) {\n      if (detaching)\n        detach(div);\n      destroy_each(each_blocks_1, detaching);\n      destroy_each(each_blocks, detaching);\n    }\n  };\n}\nfunction instance$5($$self, $$props, $$invalidate) {\n  let items;\n  let { actions } = $$props;\n  let { locale } = $$props;\n  let { visible } = $$props;\n  function flatItems(actions2) {\n    let items2 = [];\n    actions2.forEach((action) => {\n      const { handler, cheatsheet: cheatsheet2 } = action;\n      if ((handler == null ? void 0 : handler.type) === \"dropdown\") {\n        items2.push(...flatItems(handler.actions));\n      }\n      if (cheatsheet2) {\n        items2.push(action);\n      }\n    });\n    return items2;\n  }\n  $$self.$$set = ($$props2) => {\n    if (\"actions\" in $$props2)\n      $$invalidate(3, actions = $$props2.actions);\n    if (\"locale\" in $$props2)\n      $$invalidate(0, locale = $$props2.locale);\n    if (\"visible\" in $$props2)\n      $$invalidate(1, visible = $$props2.visible);\n  };\n  $$self.$$.update = () => {\n    if ($$self.$$.dirty & /*actions*/\n    8) {\n      $$invalidate(2, items = flatItems(actions));\n    }\n  };\n  return [locale, visible, items, actions];\n}\nclass Help extends SvelteComponent {\n  constructor(options) {\n    super();\n    init(this, options, instance$5, create_fragment$5, safe_not_equal, { actions: 3, locale: 0, visible: 1 });\n  }\n}\nfunction create_if_block_1$1(ctx) {\n  let span;\n  let t_value = (\n    /*locale*/\n    ctx[2].limited + \"\"\n  );\n  let t;\n  return {\n    c() {\n      span = element(\"span\");\n      t = text(t_value);\n      attr(span, \"class\", \"bytemd-status-error\");\n    },\n    m(target, anchor) {\n      insert(target, span, anchor);\n      append(span, t);\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*locale*/\n      4 && t_value !== (t_value = /*locale*/\n      ctx2[2].limited + \"\"))\n        set_data(t, t_value);\n    },\n    d(detaching) {\n      if (detaching)\n        detach(span);\n    }\n  };\n}\nfunction create_if_block$2(ctx) {\n  let label;\n  let input;\n  let t_value = (\n    /*locale*/\n    ctx[2].sync + \"\"\n  );\n  let t;\n  let mounted;\n  let dispose;\n  return {\n    c() {\n      label = element(\"label\");\n      input = element(\"input\");\n      t = text(t_value);\n      attr(input, \"type\", \"checkbox\");\n      input.checked = /*syncEnabled*/\n      ctx[1];\n    },\n    m(target, anchor) {\n      insert(target, label, anchor);\n      append(label, input);\n      append(label, t);\n      if (!mounted) {\n        dispose = listen(\n          input,\n          \"change\",\n          /*change_handler*/\n          ctx[8]\n        );\n        mounted = true;\n      }\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*syncEnabled*/\n      2) {\n        input.checked = /*syncEnabled*/\n        ctx2[1];\n      }\n      if (dirty & /*locale*/\n      4 && t_value !== (t_value = /*locale*/\n      ctx2[2].sync + \"\"))\n        set_data(t, t_value);\n    },\n    d(detaching) {\n      if (detaching)\n        detach(label);\n      mounted = false;\n      dispose();\n    }\n  };\n}\nfunction create_fragment$4(ctx) {\n  let div2;\n  let div0;\n  let span0;\n  let t0_value = (\n    /*locale*/\n    ctx[2].words + \"\"\n  );\n  let t0;\n  let t1;\n  let strong0;\n  let t2;\n  let span1;\n  let t3_value = (\n    /*locale*/\n    ctx[2].lines + \"\"\n  );\n  let t3;\n  let t4;\n  let strong1;\n  let t5;\n  let div1;\n  let span2;\n  let t6_value = (\n    /*locale*/\n    ctx[2].top + \"\"\n  );\n  let t6;\n  let mounted;\n  let dispose;\n  let if_block0 = (\n    /*islimited*/\n    ctx[3] && create_if_block_1$1(ctx)\n  );\n  let if_block1 = (\n    /*showSync*/\n    ctx[0] && create_if_block$2(ctx)\n  );\n  return {\n    c() {\n      div2 = element(\"div\");\n      div0 = element(\"div\");\n      span0 = element(\"span\");\n      t0 = text(t0_value);\n      t1 = text(\": \");\n      strong0 = element(\"strong\");\n      t2 = text(\n        /*words*/\n        ctx[5]\n      );\n      span1 = element(\"span\");\n      t3 = text(t3_value);\n      t4 = text(\": \");\n      strong1 = element(\"strong\");\n      t5 = text(\n        /*lines*/\n        ctx[4]\n      );\n      if (if_block0)\n        if_block0.c();\n      div1 = element(\"div\");\n      if (if_block1)\n        if_block1.c();\n      span2 = element(\"span\");\n      t6 = text(t6_value);\n      attr(div0, \"class\", \"bytemd-status-left\");\n      attr(div1, \"class\", \"bytemd-status-right\");\n      attr(div2, \"class\", \"bytemd-status\");\n    },\n    m(target, anchor) {\n      insert(target, div2, anchor);\n      append(div2, div0);\n      append(div0, span0);\n      append(span0, t0);\n      append(span0, t1);\n      append(span0, strong0);\n      append(strong0, t2);\n      append(div0, span1);\n      append(span1, t3);\n      append(span1, t4);\n      append(span1, strong1);\n      append(strong1, t5);\n      if (if_block0)\n        if_block0.m(div0, null);\n      append(div2, div1);\n      if (if_block1)\n        if_block1.m(div1, null);\n      append(div1, span2);\n      append(span2, t6);\n      if (!mounted) {\n        dispose = [\n          listen(\n            span2,\n            \"click\",\n            /*click_handler*/\n            ctx[9]\n          ),\n          listen(span2, \"keydown\", self(\n            /*keydown_handler*/\n            ctx[10]\n          ))\n        ];\n        mounted = true;\n      }\n    },\n    p(ctx2, [dirty]) {\n      if (dirty & /*locale*/\n      4 && t0_value !== (t0_value = /*locale*/\n      ctx2[2].words + \"\"))\n        set_data(t0, t0_value);\n      if (dirty & /*words*/\n      32)\n        set_data(\n          t2,\n          /*words*/\n          ctx2[5]\n        );\n      if (dirty & /*locale*/\n      4 && t3_value !== (t3_value = /*locale*/\n      ctx2[2].lines + \"\"))\n        set_data(t3, t3_value);\n      if (dirty & /*lines*/\n      16)\n        set_data(\n          t5,\n          /*lines*/\n          ctx2[4]\n        );\n      if (\n        /*islimited*/\n        ctx2[3]\n      ) {\n        if (if_block0) {\n          if_block0.p(ctx2, dirty);\n        } else {\n          if_block0 = create_if_block_1$1(ctx2);\n          if_block0.c();\n          if_block0.m(div0, null);\n        }\n      } else if (if_block0) {\n        if_block0.d(1);\n        if_block0 = null;\n      }\n      if (\n        /*showSync*/\n        ctx2[0]\n      ) {\n        if (if_block1) {\n          if_block1.p(ctx2, dirty);\n        } else {\n          if_block1 = create_if_block$2(ctx2);\n          if_block1.c();\n          if_block1.m(div1, span2);\n        }\n      } else if (if_block1) {\n        if_block1.d(1);\n        if_block1 = null;\n      }\n      if (dirty & /*locale*/\n      4 && t6_value !== (t6_value = /*locale*/\n      ctx2[2].top + \"\"))\n        set_data(t6, t6_value);\n    },\n    i: noop,\n    o: noop,\n    d(detaching) {\n      if (detaching)\n        detach(div2);\n      if (if_block0)\n        if_block0.d();\n      if (if_block1)\n        if_block1.d();\n      mounted = false;\n      run_all(dispose);\n    }\n  };\n}\nfunction instance$4($$self, $$props, $$invalidate) {\n  let words2;\n  let lines2;\n  let { showSync } = $$props;\n  let { value } = $$props;\n  let { syncEnabled } = $$props;\n  let { locale } = $$props;\n  let { islimited } = $$props;\n  const dispatch = createEventDispatcher();\n  const change_handler = () => dispatch(\"sync\", !syncEnabled);\n  const click_handler = () => dispatch(\"top\");\n  const keydown_handler = (e) => [\"Enter\", \"Space\"].includes(e.code) && dispatch(\"top\");\n  $$self.$$set = ($$props2) => {\n    if (\"showSync\" in $$props2)\n      $$invalidate(0, showSync = $$props2.showSync);\n    if (\"value\" in $$props2)\n      $$invalidate(7, value = $$props2.value);\n    if (\"syncEnabled\" in $$props2)\n      $$invalidate(1, syncEnabled = $$props2.syncEnabled);\n    if (\"locale\" in $$props2)\n      $$invalidate(2, locale = $$props2.locale);\n    if (\"islimited\" in $$props2)\n      $$invalidate(3, islimited = $$props2.islimited);\n  };\n  $$self.$$.update = () => {\n    if ($$self.$$.dirty & /*value*/\n    128) {\n      $$invalidate(5, words2 = word_count__WEBPACK_IMPORTED_MODULE_10__(value));\n    }\n    if ($$self.$$.dirty & /*value*/\n    128) {\n      $$invalidate(4, lines2 = value.split(\"\\n\").length);\n    }\n  };\n  return [\n    showSync,\n    syncEnabled,\n    locale,\n    islimited,\n    lines2,\n    words2,\n    dispatch,\n    value,\n    change_handler,\n    click_handler,\n    keydown_handler\n  ];\n}\nclass Status extends SvelteComponent {\n  constructor(options) {\n    super();\n    init(this, options, instance$4, create_fragment$4, safe_not_equal, {\n      showSync: 0,\n      value: 7,\n      syncEnabled: 1,\n      locale: 2,\n      islimited: 3\n    });\n  }\n}\nfunction get_each_context$1(ctx, list, i) {\n  const child_ctx = ctx.slice();\n  child_ctx[11] = list[i];\n  child_ctx[13] = i;\n  return child_ctx;\n}\nfunction create_each_block$1(ctx) {\n  let li;\n  let t_value = (\n    /*item*/\n    ctx[11].text + \"\"\n  );\n  let t;\n  let li_class_value;\n  let li_style_value;\n  let mounted;\n  let dispose;\n  function click_handler() {\n    return (\n      /*click_handler*/\n      ctx[8](\n        /*index*/\n        ctx[13]\n      )\n    );\n  }\n  function keydown_handler(...args) {\n    return (\n      /*keydown_handler*/\n      ctx[9](\n        /*index*/\n        ctx[13],\n        ...args\n      )\n    );\n  }\n  return {\n    c() {\n      li = element(\"li\");\n      t = text(t_value);\n      attr(li, \"class\", li_class_value = `bytemd-toc-${/*item*/\n      ctx[11].level}`);\n      attr(li, \"style\", li_style_value = `padding-left:${/*item*/\n      (ctx[11].level - /*minLevel*/\n      ctx[3]) * 16 + 8}px`);\n      toggle_class(\n        li,\n        \"bytemd-toc-active\",\n        /*currentHeadingIndex*/\n        ctx[4] === /*index*/\n        ctx[13]\n      );\n      toggle_class(\n        li,\n        \"bytemd-toc-first\",\n        /*item*/\n        ctx[11].level === /*minLevel*/\n        ctx[3]\n      );\n    },\n    m(target, anchor) {\n      insert(target, li, anchor);\n      append(li, t);\n      if (!mounted) {\n        dispose = [\n          listen(li, \"click\", click_handler),\n          listen(li, \"keydown\", self(keydown_handler))\n        ];\n        mounted = true;\n      }\n    },\n    p(new_ctx, dirty) {\n      ctx = new_ctx;\n      if (dirty & /*items*/\n      4 && t_value !== (t_value = /*item*/\n      ctx[11].text + \"\"))\n        set_data(t, t_value);\n      if (dirty & /*items*/\n      4 && li_class_value !== (li_class_value = `bytemd-toc-${/*item*/\n      ctx[11].level}`)) {\n        attr(li, \"class\", li_class_value);\n      }\n      if (dirty & /*items, minLevel*/\n      12 && li_style_value !== (li_style_value = `padding-left:${/*item*/\n      (ctx[11].level - /*minLevel*/\n      ctx[3]) * 16 + 8}px`)) {\n        attr(li, \"style\", li_style_value);\n      }\n      if (dirty & /*items, currentHeadingIndex*/\n      20) {\n        toggle_class(\n          li,\n          \"bytemd-toc-active\",\n          /*currentHeadingIndex*/\n          ctx[4] === /*index*/\n          ctx[13]\n        );\n      }\n      if (dirty & /*items, items, minLevel*/\n      12) {\n        toggle_class(\n          li,\n          \"bytemd-toc-first\",\n          /*item*/\n          ctx[11].level === /*minLevel*/\n          ctx[3]\n        );\n      }\n    },\n    d(detaching) {\n      if (detaching)\n        detach(li);\n      mounted = false;\n      run_all(dispose);\n    }\n  };\n}\nfunction create_fragment$3(ctx) {\n  let div;\n  let h22;\n  let t_value = (\n    /*locale*/\n    ctx[0].toc + \"\"\n  );\n  let t;\n  let ul2;\n  let each_value = (\n    /*items*/\n    ctx[2]\n  );\n  let each_blocks = [];\n  for (let i = 0; i < each_value.length; i += 1) {\n    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));\n  }\n  return {\n    c() {\n      div = element(\"div\");\n      h22 = element(\"h2\");\n      t = text(t_value);\n      ul2 = element(\"ul\");\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].c();\n      }\n      attr(div, \"class\", \"bytemd-toc\");\n      toggle_class(div, \"bytemd-hidden\", !/*visible*/\n      ctx[1]);\n    },\n    m(target, anchor) {\n      insert(target, div, anchor);\n      append(div, h22);\n      append(h22, t);\n      append(div, ul2);\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        if (each_blocks[i]) {\n          each_blocks[i].m(ul2, null);\n        }\n      }\n    },\n    p(ctx2, [dirty]) {\n      if (dirty & /*locale*/\n      1 && t_value !== (t_value = /*locale*/\n      ctx2[0].toc + \"\"))\n        set_data(t, t_value);\n      if (dirty & /*items, minLevel, currentHeadingIndex, dispatch*/\n      60) {\n        each_value = /*items*/\n        ctx2[2];\n        let i;\n        for (i = 0; i < each_value.length; i += 1) {\n          const child_ctx = get_each_context$1(ctx2, each_value, i);\n          if (each_blocks[i]) {\n            each_blocks[i].p(child_ctx, dirty);\n          } else {\n            each_blocks[i] = create_each_block$1(child_ctx);\n            each_blocks[i].c();\n            each_blocks[i].m(ul2, null);\n          }\n        }\n        for (; i < each_blocks.length; i += 1) {\n          each_blocks[i].d(1);\n        }\n        each_blocks.length = each_value.length;\n      }\n      if (dirty & /*visible*/\n      2) {\n        toggle_class(div, \"bytemd-hidden\", !/*visible*/\n        ctx2[1]);\n      }\n    },\n    i: noop,\n    o: noop,\n    d(detaching) {\n      if (detaching)\n        detach(div);\n      destroy_each(each_blocks, detaching);\n    }\n  };\n}\nfunction instance$3($$self, $$props, $$invalidate) {\n  let { hast } = $$props;\n  let { currentBlockIndex } = $$props;\n  let { locale } = $$props;\n  let { visible } = $$props;\n  const dispatch = createEventDispatcher();\n  let items;\n  let minLevel = 6;\n  let currentHeadingIndex = 0;\n  function stringifyHeading(e) {\n    let result = \"\";\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_11__.visit)(e, (node) => {\n      if (node.type === \"text\") {\n        result += node.value;\n      }\n    });\n    return result;\n  }\n  const click_handler = (index2) => {\n    dispatch(\"click\", index2);\n  };\n  const keydown_handler = (index2, e) => {\n    if ([\"Enter\", \"Space\"].includes(e.code)) {\n      dispatch(\"click\", index2);\n    }\n  };\n  $$self.$$set = ($$props2) => {\n    if (\"hast\" in $$props2)\n      $$invalidate(6, hast = $$props2.hast);\n    if (\"currentBlockIndex\" in $$props2)\n      $$invalidate(7, currentBlockIndex = $$props2.currentBlockIndex);\n    if (\"locale\" in $$props2)\n      $$invalidate(0, locale = $$props2.locale);\n    if (\"visible\" in $$props2)\n      $$invalidate(1, visible = $$props2.visible);\n  };\n  $$self.$$.update = () => {\n    if ($$self.$$.dirty & /*hast, minLevel, items, currentBlockIndex*/\n    204) {\n      (() => {\n        $$invalidate(2, items = []);\n        $$invalidate(4, currentHeadingIndex = 0);\n        hast.children.filter((v) => v.type === \"element\").forEach((node, index2) => {\n          if (node.tagName[0] === \"h\" && !!node.children.length) {\n            const i = Number(node.tagName[1]);\n            $$invalidate(3, minLevel = Math.min(minLevel, i));\n            items.push({ level: i, text: stringifyHeading(node) });\n          }\n          if (currentBlockIndex >= index2) {\n            $$invalidate(4, currentHeadingIndex = items.length - 1);\n          }\n        });\n      })();\n    }\n  };\n  return [\n    locale,\n    visible,\n    items,\n    minLevel,\n    currentHeadingIndex,\n    dispatch,\n    hast,\n    currentBlockIndex,\n    click_handler,\n    keydown_handler\n  ];\n}\nclass Toc extends SvelteComponent {\n  constructor(options) {\n    super();\n    init(this, options, instance$3, create_fragment$3, not_equal, {\n      hast: 6,\n      currentBlockIndex: 7,\n      locale: 0,\n      visible: 1\n    });\n  }\n}\nfunction get_each_context(ctx, list, i) {\n  const child_ctx = ctx.slice();\n  child_ctx[25] = list[i];\n  child_ctx[27] = i;\n  return child_ctx;\n}\nfunction get_each_context_1(ctx, list, i) {\n  const child_ctx = ctx.slice();\n  child_ctx[25] = list[i];\n  child_ctx[27] = i;\n  return child_ctx;\n}\nfunction create_else_block(ctx) {\n  let div0;\n  let t0_value = (\n    /*locale*/\n    ctx[2].write + \"\"\n  );\n  let t0;\n  let div1;\n  let t1_value = (\n    /*locale*/\n    ctx[2].preview + \"\"\n  );\n  let t1;\n  let mounted;\n  let dispose;\n  return {\n    c() {\n      div0 = element(\"div\");\n      t0 = text(t0_value);\n      div1 = element(\"div\");\n      t1 = text(t1_value);\n      attr(div0, \"class\", \"bytemd-toolbar-tab\");\n      toggle_class(\n        div0,\n        \"bytemd-toolbar-tab-active\",\n        /*activeTab*/\n        ctx[1] !== \"preview\"\n      );\n      attr(div1, \"class\", \"bytemd-toolbar-tab\");\n      toggle_class(\n        div1,\n        \"bytemd-toolbar-tab-active\",\n        /*activeTab*/\n        ctx[1] === \"preview\"\n      );\n    },\n    m(target, anchor) {\n      insert(target, div0, anchor);\n      append(div0, t0);\n      insert(target, div1, anchor);\n      append(div1, t1);\n      if (!mounted) {\n        dispose = [\n          listen(\n            div0,\n            \"click\",\n            /*click_handler*/\n            ctx[16]\n          ),\n          listen(div0, \"keydown\", self(\n            /*keydown_handler*/\n            ctx[17]\n          )),\n          listen(\n            div1,\n            \"click\",\n            /*click_handler_1*/\n            ctx[18]\n          ),\n          listen(div1, \"keydown\", self(\n            /*keydown_handler_1*/\n            ctx[19]\n          ))\n        ];\n        mounted = true;\n      }\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*locale*/\n      4 && t0_value !== (t0_value = /*locale*/\n      ctx2[2].write + \"\"))\n        set_data(t0, t0_value);\n      if (dirty & /*activeTab*/\n      2) {\n        toggle_class(\n          div0,\n          \"bytemd-toolbar-tab-active\",\n          /*activeTab*/\n          ctx2[1] !== \"preview\"\n        );\n      }\n      if (dirty & /*locale*/\n      4 && t1_value !== (t1_value = /*locale*/\n      ctx2[2].preview + \"\"))\n        set_data(t1, t1_value);\n      if (dirty & /*activeTab*/\n      2) {\n        toggle_class(\n          div1,\n          \"bytemd-toolbar-tab-active\",\n          /*activeTab*/\n          ctx2[1] === \"preview\"\n        );\n      }\n    },\n    d(detaching) {\n      if (detaching)\n        detach(div0);\n      if (detaching)\n        detach(div1);\n      mounted = false;\n      run_all(dispose);\n    }\n  };\n}\nfunction create_if_block_1(ctx) {\n  let each_1_anchor;\n  let each_value_1 = (\n    /*actions*/\n    ctx[3]\n  );\n  let each_blocks = [];\n  for (let i = 0; i < each_value_1.length; i += 1) {\n    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));\n  }\n  return {\n    c() {\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].c();\n      }\n      each_1_anchor = empty();\n    },\n    m(target, anchor) {\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        if (each_blocks[i]) {\n          each_blocks[i].m(target, anchor);\n        }\n      }\n      insert(target, each_1_anchor, anchor);\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*tippyClass, actions*/\n      8) {\n        each_value_1 = /*actions*/\n        ctx2[3];\n        let i;\n        for (i = 0; i < each_value_1.length; i += 1) {\n          const child_ctx = get_each_context_1(ctx2, each_value_1, i);\n          if (each_blocks[i]) {\n            each_blocks[i].p(child_ctx, dirty);\n          } else {\n            each_blocks[i] = create_each_block_1(child_ctx);\n            each_blocks[i].c();\n            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);\n          }\n        }\n        for (; i < each_blocks.length; i += 1) {\n          each_blocks[i].d(1);\n        }\n        each_blocks.length = each_value_1.length;\n      }\n    },\n    d(detaching) {\n      destroy_each(each_blocks, detaching);\n      if (detaching)\n        detach(each_1_anchor);\n    }\n  };\n}\nfunction create_if_block_2(ctx) {\n  let div;\n  let raw_value = (\n    /*item*/\n    ctx[25].icon + \"\"\n  );\n  return {\n    c() {\n      div = element(\"div\");\n      attr(div, \"class\", [\"bytemd-toolbar-icon\", tippyClass].join(\" \"));\n      attr(\n        div,\n        \"bytemd-tippy-path\",\n        /*index*/\n        ctx[27]\n      );\n    },\n    m(target, anchor) {\n      insert(target, div, anchor);\n      div.innerHTML = raw_value;\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*actions*/\n      8 && raw_value !== (raw_value = /*item*/\n      ctx2[25].icon + \"\"))\n        div.innerHTML = raw_value;\n    },\n    d(detaching) {\n      if (detaching)\n        detach(div);\n    }\n  };\n}\nfunction create_each_block_1(ctx) {\n  let if_block_anchor;\n  let if_block = (\n    /*item*/\n    ctx[25].handler && create_if_block_2(ctx)\n  );\n  return {\n    c() {\n      if (if_block)\n        if_block.c();\n      if_block_anchor = empty();\n    },\n    m(target, anchor) {\n      if (if_block)\n        if_block.m(target, anchor);\n      insert(target, if_block_anchor, anchor);\n    },\n    p(ctx2, dirty) {\n      if (\n        /*item*/\n        ctx2[25].handler\n      ) {\n        if (if_block) {\n          if_block.p(ctx2, dirty);\n        } else {\n          if_block = create_if_block_2(ctx2);\n          if_block.c();\n          if_block.m(if_block_anchor.parentNode, if_block_anchor);\n        }\n      } else if (if_block) {\n        if_block.d(1);\n        if_block = null;\n      }\n    },\n    d(detaching) {\n      if (if_block)\n        if_block.d(detaching);\n      if (detaching)\n        detach(if_block_anchor);\n    }\n  };\n}\nfunction create_if_block$1(ctx) {\n  let div;\n  let raw_value = (\n    /*item*/\n    ctx[25].icon + \"\"\n  );\n  return {\n    c() {\n      div = element(\"div\");\n      attr(div, \"class\", [\"bytemd-toolbar-icon\", tippyClass, tippyClassRight].join(\" \"));\n      attr(\n        div,\n        \"bytemd-tippy-path\",\n        /*index*/\n        ctx[27]\n      );\n      toggle_class(\n        div,\n        \"bytemd-toolbar-icon-active\",\n        /*item*/\n        ctx[25].active\n      );\n    },\n    m(target, anchor) {\n      insert(target, div, anchor);\n      div.innerHTML = raw_value;\n    },\n    p(ctx2, dirty) {\n      if (dirty & /*rightActions*/\n      32 && raw_value !== (raw_value = /*item*/\n      ctx2[25].icon + \"\"))\n        div.innerHTML = raw_value;\n      if (dirty & /*rightActions*/\n      32) {\n        toggle_class(\n          div,\n          \"bytemd-toolbar-icon-active\",\n          /*item*/\n          ctx2[25].active\n        );\n      }\n    },\n    d(detaching) {\n      if (detaching)\n        detach(div);\n    }\n  };\n}\nfunction create_each_block(ctx) {\n  let if_block_anchor;\n  let if_block = !/*item*/\n  ctx[25].hidden && create_if_block$1(ctx);\n  return {\n    c() {\n      if (if_block)\n        if_block.c();\n      if_block_anchor = empty();\n    },\n    m(target, anchor) {\n      if (if_block)\n        if_block.m(target, anchor);\n      insert(target, if_block_anchor, anchor);\n    },\n    p(ctx2, dirty) {\n      if (!/*item*/\n      ctx2[25].hidden) {\n        if (if_block) {\n          if_block.p(ctx2, dirty);\n        } else {\n          if_block = create_if_block$1(ctx2);\n          if_block.c();\n          if_block.m(if_block_anchor.parentNode, if_block_anchor);\n        }\n      } else if (if_block) {\n        if_block.d(1);\n        if_block = null;\n      }\n    },\n    d(detaching) {\n      if (if_block)\n        if_block.d(detaching);\n      if (detaching)\n        detach(if_block_anchor);\n    }\n  };\n}\nfunction create_fragment$2(ctx) {\n  let div2;\n  let div0;\n  let div1;\n  let mounted;\n  let dispose;\n  function select_block_type(ctx2, dirty) {\n    if (\n      /*split*/\n      ctx2[0]\n    )\n      return create_if_block_1;\n    return create_else_block;\n  }\n  let current_block_type = select_block_type(ctx);\n  let if_block = current_block_type(ctx);\n  let each_value = (\n    /*rightActions*/\n    ctx[5]\n  );\n  let each_blocks = [];\n  for (let i = 0; i < each_value.length; i += 1) {\n    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));\n  }\n  return {\n    c() {\n      div2 = element(\"div\");\n      div0 = element(\"div\");\n      if_block.c();\n      div1 = element(\"div\");\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].c();\n      }\n      attr(div0, \"class\", \"bytemd-toolbar-left\");\n      attr(div1, \"class\", \"bytemd-toolbar-right\");\n      attr(div2, \"class\", \"bytemd-toolbar\");\n    },\n    m(target, anchor) {\n      insert(target, div2, anchor);\n      append(div2, div0);\n      if_block.m(div0, null);\n      append(div2, div1);\n      for (let i = 0; i < each_blocks.length; i += 1) {\n        if (each_blocks[i]) {\n          each_blocks[i].m(div1, null);\n        }\n      }\n      ctx[20](div2);\n      if (!mounted) {\n        dispose = [\n          listen(\n            div2,\n            \"click\",\n            /*handleClick*/\n            ctx[7]\n          ),\n          listen(div2, \"keydown\", self(\n            /*keydown_handler_2*/\n            ctx[21]\n          ))\n        ];\n        mounted = true;\n      }\n    },\n    p(ctx2, [dirty]) {\n      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block) {\n        if_block.p(ctx2, dirty);\n      } else {\n        if_block.d(1);\n        if_block = current_block_type(ctx2);\n        if (if_block) {\n          if_block.c();\n          if_block.m(div0, null);\n        }\n      }\n      if (dirty & /*tippyClass, tippyClassRight, rightActions*/\n      32) {\n        each_value = /*rightActions*/\n        ctx2[5];\n        let i;\n        for (i = 0; i < each_value.length; i += 1) {\n          const child_ctx = get_each_context(ctx2, each_value, i);\n          if (each_blocks[i]) {\n            each_blocks[i].p(child_ctx, dirty);\n          } else {\n            each_blocks[i] = create_each_block(child_ctx);\n            each_blocks[i].c();\n            each_blocks[i].m(div1, null);\n          }\n        }\n        for (; i < each_blocks.length; i += 1) {\n          each_blocks[i].d(1);\n        }\n        each_blocks.length = each_value.length;\n      }\n    },\n    i: noop,\n    o: noop,\n    d(detaching) {\n      if (detaching)\n        detach(div2);\n      if_block.d();\n      destroy_each(each_blocks, detaching);\n      ctx[20](null);\n      mounted = false;\n      run_all(dispose);\n    }\n  };\n}\nconst tippyClass = \"bytemd-tippy\";\nconst tippyClassRight = \"bytemd-tippy-right\";\nconst tippyPathKey = \"bytemd-tippy-path\";\nfunction instance$2($$self, $$props, $$invalidate) {\n  let tocActive;\n  let helpActive;\n  let writeActive;\n  let previewActive;\n  let rightActions;\n  const dispatch = createEventDispatcher();\n  let toolbar;\n  let { context } = $$props;\n  let { split } = $$props;\n  let { activeTab } = $$props;\n  let { fullscreen: fullscreen2 } = $$props;\n  let { sidebar } = $$props;\n  let { locale } = $$props;\n  let { actions } = $$props;\n  let { rightAfferentActions } = $$props;\n  function getPayloadFromElement(e) {\n    var _a, _b;\n    const paths = (_b = (_a = e.getAttribute(tippyPathKey)) == null ? void 0 : _a.split(\"-\")) == null ? void 0 : _b.map((x) => parseInt(x, 10));\n    if (!paths)\n      return;\n    let item = {\n      title: \"\",\n      handler: {\n        type: \"dropdown\",\n        actions: e.classList.contains(tippyClassRight) ? rightActions : actions\n      }\n    };\n    paths == null ? void 0 : paths.forEach((index2) => {\n      var _a2;\n      if (((_a2 = item.handler) == null ? void 0 : _a2.type) === \"dropdown\") {\n        item = item.handler.actions[index2];\n      }\n    });\n    return { paths, item };\n  }\n  let delegateInstance;\n  function init2() {\n    delegateInstance = (0,tippy_js__WEBPACK_IMPORTED_MODULE_12__.delegate)(toolbar, {\n      target: `.${tippyClass}`,\n      onCreate({ setProps, reference }) {\n        const payload = getPayloadFromElement(reference);\n        if (!payload)\n          return;\n        const { item, paths } = payload;\n        const { handler } = item;\n        if (!handler)\n          return;\n        if (handler.type === \"action\") {\n          setProps({\n            content: item.title,\n            onHidden(ins) {\n              ins.destroy();\n            }\n          });\n        } else if (handler.type === \"dropdown\") {\n          const dropdown = document.createElement(\"div\");\n          dropdown.classList.add(\"bytemd-dropdown\");\n          if (item.title) {\n            const dropdownTitle = document.createElement(\"div\");\n            dropdownTitle.classList.add(\"bytemd-dropdown-title\");\n            dropdownTitle.appendChild(document.createTextNode(item.title));\n            dropdown.appendChild(dropdownTitle);\n          }\n          handler.actions.forEach((subAction, i) => {\n            var _a;\n            const dropdownItem = document.createElement(\"div\");\n            dropdownItem.classList.add(\"bytemd-dropdown-item\");\n            dropdownItem.setAttribute(tippyPathKey, [...paths, i].join(\"-\"));\n            if (((_a = subAction.handler) == null ? void 0 : _a.type) === \"dropdown\") {\n              dropdownItem.classList.add(tippyClass);\n            }\n            if (reference.classList.contains(tippyClassRight)) {\n              dropdownItem.classList.add(tippyClassRight);\n            }\n            dropdownItem.innerHTML = `${subAction.icon ? `<div class=\"bytemd-dropdown-item-icon\">${subAction.icon}</div>` : \"\"}<div class=\"bytemd-dropdown-item-title\">${subAction.title}</div>`;\n            dropdown.appendChild(dropdownItem);\n          });\n          setProps({\n            allowHTML: true,\n            showOnCreate: true,\n            theme: \"light-border\",\n            placement: \"bottom-start\",\n            interactive: true,\n            interactiveDebounce: 50,\n            arrow: false,\n            offset: [0, 4],\n            content: dropdown.outerHTML,\n            onHidden(ins) {\n              ins.destroy();\n            },\n            onCreate(ins) {\n              [...ins.popper.querySelectorAll(\".bytemd-dropdown-item\")].forEach((el, i) => {\n                var _a;\n                const actionHandler = (_a = handler.actions[i]) == null ? void 0 : _a.handler;\n                if ((actionHandler == null ? void 0 : actionHandler.type) === \"action\") {\n                  const { mouseenter, mouseleave } = actionHandler;\n                  if (mouseenter) {\n                    el.addEventListener(\"mouseenter\", () => {\n                      mouseenter(context);\n                    });\n                  }\n                  if (mouseleave) {\n                    el.addEventListener(\"mouseleave\", () => {\n                      mouseleave(context);\n                    });\n                  }\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n  }\n  onMount(() => {\n    init2();\n  });\n  function handleClick(e) {\n    var _a, _b;\n    const target = e.target.closest(`[${tippyPathKey}]`);\n    if (!target)\n      return;\n    const handler = (_b = (_a = getPayloadFromElement(target)) == null ? void 0 : _a.item) == null ? void 0 : _b.handler;\n    if ((handler == null ? void 0 : handler.type) === \"action\") {\n      handler.click(context);\n    }\n    delegateInstance == null ? void 0 : delegateInstance.destroy();\n    init2();\n  }\n  const click_handler = () => dispatch(\"tab\", \"write\");\n  const keydown_handler = (e) => [\"Enter\", \"Space\"].includes(e.code) && dispatch(\"tab\", \"write\");\n  const click_handler_1 = () => dispatch(\"tab\", \"preview\");\n  const keydown_handler_1 = (e) => [\"Enter\", \"Space\"].includes(e.code) && dispatch(\"tab\", \"preview\");\n  function div2_binding($$value) {\n    binding_callbacks[$$value ? \"unshift\" : \"push\"](() => {\n      toolbar = $$value;\n      $$invalidate(4, toolbar);\n    });\n  }\n  const keydown_handler_2 = (e) => [\"Enter\", \"Space\"].includes(e.code) && handleClick(e);\n  $$self.$$set = ($$props2) => {\n    if (\"context\" in $$props2)\n      $$invalidate(8, context = $$props2.context);\n    if (\"split\" in $$props2)\n      $$invalidate(0, split = $$props2.split);\n    if (\"activeTab\" in $$props2)\n      $$invalidate(1, activeTab = $$props2.activeTab);\n    if (\"fullscreen\" in $$props2)\n      $$invalidate(9, fullscreen2 = $$props2.fullscreen);\n    if (\"sidebar\" in $$props2)\n      $$invalidate(10, sidebar = $$props2.sidebar);\n    if (\"locale\" in $$props2)\n      $$invalidate(2, locale = $$props2.locale);\n    if (\"actions\" in $$props2)\n      $$invalidate(3, actions = $$props2.actions);\n    if (\"rightAfferentActions\" in $$props2)\n      $$invalidate(11, rightAfferentActions = $$props2.rightAfferentActions);\n  };\n  $$self.$$.update = () => {\n    if ($$self.$$.dirty & /*sidebar*/\n    1024) {\n      $$invalidate(15, tocActive = sidebar === \"toc\");\n    }\n    if ($$self.$$.dirty & /*sidebar*/\n    1024) {\n      $$invalidate(14, helpActive = sidebar === \"help\");\n    }\n    if ($$self.$$.dirty & /*activeTab*/\n    2) {\n      $$invalidate(13, writeActive = activeTab === \"write\");\n    }\n    if ($$self.$$.dirty & /*activeTab*/\n    2) {\n      $$invalidate(12, previewActive = activeTab === \"preview\");\n    }\n    if ($$self.$$.dirty & /*tocActive, locale, helpActive, writeActive, split, previewActive, fullscreen, rightAfferentActions*/\n    64005) {\n      $$invalidate(5, rightActions = [\n        {\n          title: tocActive ? locale.closeToc : locale.toc,\n          icon: icons.AlignTextLeftOne,\n          handler: {\n            type: \"action\",\n            click() {\n              dispatch(\"click\", \"toc\");\n            }\n          },\n          active: tocActive\n        },\n        {\n          title: helpActive ? locale.closeHelp : locale.help,\n          icon: icons.Helpcenter,\n          handler: {\n            type: \"action\",\n            click() {\n              dispatch(\"click\", \"help\");\n            }\n          },\n          active: helpActive\n        },\n        {\n          title: writeActive ? locale.exitWriteOnly : locale.writeOnly,\n          icon: icons.LeftExpand,\n          handler: {\n            type: \"action\",\n            click() {\n              dispatch(\"tab\", \"write\");\n            }\n          },\n          active: writeActive,\n          hidden: !split\n        },\n        {\n          title: previewActive ? locale.exitPreviewOnly : locale.previewOnly,\n          icon: icons.RightExpand,\n          handler: {\n            type: \"action\",\n            click() {\n              dispatch(\"tab\", \"preview\");\n            }\n          },\n          active: previewActive,\n          hidden: !split\n        },\n        {\n          title: fullscreen2 ? locale.exitFullscreen : locale.fullscreen,\n          icon: fullscreen2 ? icons.OffScreen : icons.FullScreen,\n          handler: {\n            type: \"action\",\n            click() {\n              dispatch(\"click\", \"fullscreen\");\n            }\n          }\n        },\n        {\n          title: locale.source,\n          icon: icons.GithubOne,\n          handler: {\n            type: \"action\",\n            click() {\n              window.open(\"https://github.com/bytedance/bytemd\");\n            }\n          }\n        },\n        ...rightAfferentActions\n      ]);\n    }\n  };\n  return [\n    split,\n    activeTab,\n    locale,\n    actions,\n    toolbar,\n    rightActions,\n    dispatch,\n    handleClick,\n    context,\n    fullscreen2,\n    sidebar,\n    rightAfferentActions,\n    previewActive,\n    writeActive,\n    helpActive,\n    tocActive,\n    click_handler,\n    keydown_handler,\n    click_handler_1,\n    keydown_handler_1,\n    div2_binding,\n    keydown_handler_2\n  ];\n}\nclass Toolbar extends SvelteComponent {\n  constructor(options) {\n    super();\n    init(this, options, instance$2, create_fragment$2, not_equal, {\n      context: 8,\n      split: 0,\n      activeTab: 1,\n      fullscreen: 9,\n      sidebar: 10,\n      locale: 2,\n      actions: 3,\n      rightAfferentActions: 11\n    });\n  }\n}\nconst schemaStr = JSON.stringify(hast_util_sanitize__WEBPACK_IMPORTED_MODULE_13__.defaultSchema);\nfunction getProcessor({\n  sanitize,\n  plugins,\n  remarkRehype: remarkRehypeOptions = {}\n}) {\n  let processor = (0,unified__WEBPACK_IMPORTED_MODULE_14__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_15__[\"default\"]);\n  plugins == null ? void 0 : plugins.forEach(({ remark }) => {\n    if (remark)\n      processor = remark(processor);\n  });\n  processor = processor.use(remark_rehype__WEBPACK_IMPORTED_MODULE_16__[\"default\"], { allowDangerousHtml: true, ...remarkRehypeOptions }).use(rehype_raw__WEBPACK_IMPORTED_MODULE_17__[\"default\"]);\n  let schema = JSON.parse(schemaStr);\n  schema.attributes[\"*\"].push(\"className\");\n  if (typeof sanitize === \"function\") {\n    schema = sanitize(schema);\n  }\n  processor = processor.use(rehype_sanitize__WEBPACK_IMPORTED_MODULE_18__[\"default\"], schema);\n  plugins == null ? void 0 : plugins.forEach(({ rehype }) => {\n    if (rehype)\n      processor = rehype(processor);\n  });\n  return processor.use(rehype_stringify__WEBPACK_IMPORTED_MODULE_19__[\"default\"]);\n}\nfunction create_fragment$1(ctx) {\n  let div;\n  return {\n    c() {\n      div = element(\"div\");\n      attr(div, \"class\", \"markdown-body\");\n    },\n    m(target, anchor) {\n      insert(target, div, anchor);\n      div.innerHTML = /*html*/\n      ctx[1];\n      ctx[8](div);\n    },\n    p(ctx2, [dirty]) {\n      if (dirty & /*html*/\n      2)\n        div.innerHTML = /*html*/\n        ctx2[1];\n    },\n    i: noop,\n    o: noop,\n    d(detaching) {\n      if (detaching)\n        detach(div);\n      ctx[8](null);\n    }\n  };\n}\nfunction instance$1($$self, $$props, $$invalidate) {\n  let html;\n  const dispatch = createEventDispatcher();\n  let { value = \"\" } = $$props;\n  let { plugins = [] } = $$props;\n  let { sanitize = void 0 } = $$props;\n  let { remarkRehype: remarkRehype2 = void 0 } = $$props;\n  let markdownBody;\n  let cbs = [];\n  function on() {\n    cbs = plugins.map((p) => {\n      var _a;\n      return (_a = p.viewerEffect) == null ? void 0 : _a.call(p, { markdownBody, file });\n    });\n  }\n  function off() {\n    cbs.forEach((cb) => cb == null ? void 0 : cb());\n  }\n  onMount(() => {\n    markdownBody.addEventListener(\"click\", (e) => {\n      var _a;\n      const $ = e.target;\n      if ($.tagName !== \"A\")\n        return;\n      const href = $.getAttribute(\"href\");\n      if (!(href == null ? void 0 : href.startsWith(\"#\")))\n        return;\n      (_a = markdownBody.querySelector(\"#user-content-\" + href.slice(1))) == null ? void 0 : _a.scrollIntoView();\n    });\n  });\n  onDestroy(off);\n  let file;\n  let i = 0;\n  const dispatchPlugin = () => (tree, file2) => {\n    tick().then(() => {\n      dispatch(\"hast\", { hast: tree, file: file2 });\n    });\n  };\n  afterUpdate(() => {\n    off();\n    on();\n  });\n  function div_binding($$value) {\n    binding_callbacks[$$value ? \"unshift\" : \"push\"](() => {\n      markdownBody = $$value;\n      $$invalidate(0, markdownBody);\n    });\n  }\n  $$self.$$set = ($$props2) => {\n    if (\"value\" in $$props2)\n      $$invalidate(2, value = $$props2.value);\n    if (\"plugins\" in $$props2)\n      $$invalidate(3, plugins = $$props2.plugins);\n    if (\"sanitize\" in $$props2)\n      $$invalidate(4, sanitize = $$props2.sanitize);\n    if (\"remarkRehype\" in $$props2)\n      $$invalidate(5, remarkRehype2 = $$props2.remarkRehype);\n  };\n  $$self.$$.update = () => {\n    if ($$self.$$.dirty & /*sanitize, plugins, remarkRehype, value, i*/\n    188) {\n      try {\n        $$invalidate(6, file = getProcessor({\n          sanitize,\n          plugins: [\n            ...plugins,\n            {\n              // remark: (p) =>\n              //   p.use(() => (tree) =>{\n              //     console.log(tree)\n              //   }),\n              rehype: (processor) => processor.use(dispatchPlugin)\n            }\n          ],\n          remarkRehype: remarkRehype2\n        }).processSync(value));\n        $$invalidate(7, i++, i);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    if ($$self.$$.dirty & /*file, i*/\n    192) {\n      $$invalidate(1, html = `${file}<!--${i}-->`);\n    }\n  };\n  return [\n    markdownBody,\n    html,\n    value,\n    plugins,\n    sanitize,\n    remarkRehype2,\n    file,\n    i,\n    div_binding\n  ];\n}\nclass Viewer extends SvelteComponent {\n  constructor(options) {\n    super();\n    init(this, options, instance$1, create_fragment$1, not_equal, {\n      value: 2,\n      plugins: 3,\n      sanitize: 4,\n      remarkRehype: 5\n    });\n  }\n}\nfunction create_if_block(ctx) {\n  let viewer;\n  let current;\n  viewer = new Viewer({\n    props: {\n      value: (\n        /*debouncedValue*/\n        ctx[16]\n      ),\n      plugins: (\n        /*plugins*/\n        ctx[1]\n      ),\n      sanitize: (\n        /*sanitize*/\n        ctx[2]\n      ),\n      remarkRehype: (\n        /*remarkRehype*/\n        ctx[3]\n      )\n    }\n  });\n  viewer.$on(\n    \"hast\",\n    /*hast_handler*/\n    ctx[35]\n  );\n  return {\n    c() {\n      create_component(viewer.$$.fragment);\n    },\n    m(target, anchor) {\n      mount_component(viewer, target, anchor);\n      current = true;\n    },\n    p(ctx2, dirty) {\n      const viewer_changes = {};\n      if (dirty[0] & /*debouncedValue*/\n      65536)\n        viewer_changes.value = /*debouncedValue*/\n        ctx2[16];\n      if (dirty[0] & /*plugins*/\n      2)\n        viewer_changes.plugins = /*plugins*/\n        ctx2[1];\n      if (dirty[0] & /*sanitize*/\n      4)\n        viewer_changes.sanitize = /*sanitize*/\n        ctx2[2];\n      if (dirty[0] & /*remarkRehype*/\n      8)\n        viewer_changes.remarkRehype = /*remarkRehype*/\n        ctx2[3];\n      viewer.$set(viewer_changes);\n    },\n    i(local) {\n      if (current)\n        return;\n      transition_in(viewer.$$.fragment, local);\n      current = true;\n    },\n    o(local) {\n      transition_out(viewer.$$.fragment, local);\n      current = false;\n    },\n    d(detaching) {\n      destroy_component(viewer, detaching);\n    }\n  };\n}\nfunction create_fragment(ctx) {\n  let div5;\n  let toolbar;\n  let div4;\n  let div0;\n  let div0_style_value;\n  let div1;\n  let div1_style_value;\n  let div3;\n  let div2;\n  let raw_value = icons.Close + \"\";\n  let help2;\n  let toc2;\n  let status;\n  let current;\n  let mounted;\n  let dispose;\n  toolbar = new Toolbar({\n    props: {\n      context: (\n        /*context*/\n        ctx[10]\n      ),\n      split: (\n        /*split*/\n        ctx[11]\n      ),\n      activeTab: (\n        /*activeTab*/\n        ctx[8]\n      ),\n      sidebar: (\n        /*sidebar*/\n        ctx[9]\n      ),\n      fullscreen: (\n        /*fullscreen*/\n        ctx[15]\n      ),\n      rightAfferentActions: (\n        /*actions*/\n        ctx[21].rightActions\n      ),\n      locale: (\n        /*mergedLocale*/\n        ctx[12]\n      ),\n      actions: (\n        /*actions*/\n        ctx[21].leftActions\n      )\n    }\n  });\n  toolbar.$on(\n    \"key\",\n    /*key_handler*/\n    ctx[31]\n  );\n  toolbar.$on(\n    \"tab\",\n    /*tab_handler*/\n    ctx[32]\n  );\n  toolbar.$on(\n    \"click\",\n    /*click_handler*/\n    ctx[33]\n  );\n  let if_block = !/*overridePreview*/\n  ctx[4] && /*split*/\n  (ctx[11] || /*activeTab*/\n  ctx[8] === \"preview\") && create_if_block(ctx);\n  help2 = new Help({\n    props: {\n      locale: (\n        /*mergedLocale*/\n        ctx[12]\n      ),\n      actions: (\n        /*actions*/\n        ctx[21].leftActions\n      ),\n      visible: (\n        /*sidebar*/\n        ctx[9] === \"help\"\n      )\n    }\n  });\n  toc2 = new Toc({\n    props: {\n      hast: (\n        /*hast*/\n        ctx[18]\n      ),\n      locale: (\n        /*mergedLocale*/\n        ctx[12]\n      ),\n      currentBlockIndex: (\n        /*currentBlockIndex*/\n        ctx[20]\n      ),\n      visible: (\n        /*sidebar*/\n        ctx[9] === \"toc\"\n      )\n    }\n  });\n  toc2.$on(\n    \"click\",\n    /*click_handler_2*/\n    ctx[39]\n  );\n  status = new Status({\n    props: {\n      locale: (\n        /*mergedLocale*/\n        ctx[12]\n      ),\n      showSync: !/*overridePreview*/\n      ctx[4] && /*split*/\n      ctx[11],\n      value: (\n        /*debouncedValue*/\n        ctx[16]\n      ),\n      syncEnabled: (\n        /*syncEnabled*/\n        ctx[17]\n      ),\n      islimited: (\n        /*value*/\n        ctx[0].length > /*maxLength*/\n        ctx[5]\n      )\n    }\n  });\n  status.$on(\n    \"sync\",\n    /*sync_handler*/\n    ctx[40]\n  );\n  status.$on(\n    \"top\",\n    /*top_handler*/\n    ctx[41]\n  );\n  return {\n    c() {\n      div5 = element(\"div\");\n      create_component(toolbar.$$.fragment);\n      div4 = element(\"div\");\n      div0 = element(\"div\");\n      div1 = element(\"div\");\n      if (if_block)\n        if_block.c();\n      div3 = element(\"div\");\n      div2 = element(\"div\");\n      create_component(help2.$$.fragment);\n      create_component(toc2.$$.fragment);\n      create_component(status.$$.fragment);\n      attr(div0, \"class\", \"bytemd-editor\");\n      attr(div0, \"style\", div0_style_value = /*styles*/\n      ctx[22].edit);\n      attr(div1, \"class\", \"bytemd-preview\");\n      attr(div1, \"style\", div1_style_value = /*styles*/\n      ctx[22].preview);\n      attr(div2, \"class\", \"bytemd-sidebar-close\");\n      attr(div3, \"class\", \"bytemd-sidebar\");\n      toggle_class(\n        div3,\n        \"bytemd-hidden\",\n        /*sidebar*/\n        ctx[9] === false\n      );\n      attr(div4, \"class\", \"bytemd-body\");\n      attr(div5, \"class\", \"bytemd\");\n      toggle_class(\n        div5,\n        \"bytemd-split\",\n        /*split*/\n        ctx[11] && /*activeTab*/\n        ctx[8] === false\n      );\n      toggle_class(\n        div5,\n        \"bytemd-fullscreen\",\n        /*fullscreen*/\n        ctx[15]\n      );\n    },\n    m(target, anchor) {\n      insert(target, div5, anchor);\n      mount_component(toolbar, div5, null);\n      append(div5, div4);\n      append(div4, div0);\n      ctx[34](div0);\n      append(div4, div1);\n      if (if_block)\n        if_block.m(div1, null);\n      ctx[36](div1);\n      append(div4, div3);\n      append(div3, div2);\n      div2.innerHTML = raw_value;\n      mount_component(help2, div3, null);\n      mount_component(toc2, div3, null);\n      mount_component(status, div5, null);\n      ctx[42](div5);\n      current = true;\n      if (!mounted) {\n        dispose = [\n          listen(\n            div2,\n            \"click\",\n            /*click_handler_1*/\n            ctx[37]\n          ),\n          listen(div2, \"keydown\", self(\n            /*keydown_handler*/\n            ctx[38]\n          ))\n        ];\n        mounted = true;\n      }\n    },\n    p(ctx2, dirty) {\n      const toolbar_changes = {};\n      if (dirty[0] & /*context*/\n      1024)\n        toolbar_changes.context = /*context*/\n        ctx2[10];\n      if (dirty[0] & /*split*/\n      2048)\n        toolbar_changes.split = /*split*/\n        ctx2[11];\n      if (dirty[0] & /*activeTab*/\n      256)\n        toolbar_changes.activeTab = /*activeTab*/\n        ctx2[8];\n      if (dirty[0] & /*sidebar*/\n      512)\n        toolbar_changes.sidebar = /*sidebar*/\n        ctx2[9];\n      if (dirty[0] & /*fullscreen*/\n      32768)\n        toolbar_changes.fullscreen = /*fullscreen*/\n        ctx2[15];\n      if (dirty[0] & /*actions*/\n      2097152)\n        toolbar_changes.rightAfferentActions = /*actions*/\n        ctx2[21].rightActions;\n      if (dirty[0] & /*mergedLocale*/\n      4096)\n        toolbar_changes.locale = /*mergedLocale*/\n        ctx2[12];\n      if (dirty[0] & /*actions*/\n      2097152)\n        toolbar_changes.actions = /*actions*/\n        ctx2[21].leftActions;\n      toolbar.$set(toolbar_changes);\n      if (!current || dirty[0] & /*styles*/\n      4194304 && div0_style_value !== (div0_style_value = /*styles*/\n      ctx2[22].edit)) {\n        attr(div0, \"style\", div0_style_value);\n      }\n      if (!/*overridePreview*/\n      ctx2[4] && /*split*/\n      (ctx2[11] || /*activeTab*/\n      ctx2[8] === \"preview\")) {\n        if (if_block) {\n          if_block.p(ctx2, dirty);\n          if (dirty[0] & /*overridePreview, split, activeTab*/\n          2320) {\n            transition_in(if_block, 1);\n          }\n        } else {\n          if_block = create_if_block(ctx2);\n          if_block.c();\n          transition_in(if_block, 1);\n          if_block.m(div1, null);\n        }\n      } else if (if_block) {\n        group_outros();\n        transition_out(if_block, 1, 1, () => {\n          if_block = null;\n        });\n        check_outros();\n      }\n      if (!current || dirty[0] & /*styles*/\n      4194304 && div1_style_value !== (div1_style_value = /*styles*/\n      ctx2[22].preview)) {\n        attr(div1, \"style\", div1_style_value);\n      }\n      const help_changes = {};\n      if (dirty[0] & /*mergedLocale*/\n      4096)\n        help_changes.locale = /*mergedLocale*/\n        ctx2[12];\n      if (dirty[0] & /*actions*/\n      2097152)\n        help_changes.actions = /*actions*/\n        ctx2[21].leftActions;\n      if (dirty[0] & /*sidebar*/\n      512)\n        help_changes.visible = /*sidebar*/\n        ctx2[9] === \"help\";\n      help2.$set(help_changes);\n      const toc_changes = {};\n      if (dirty[0] & /*hast*/\n      262144)\n        toc_changes.hast = /*hast*/\n        ctx2[18];\n      if (dirty[0] & /*mergedLocale*/\n      4096)\n        toc_changes.locale = /*mergedLocale*/\n        ctx2[12];\n      if (dirty[0] & /*currentBlockIndex*/\n      1048576)\n        toc_changes.currentBlockIndex = /*currentBlockIndex*/\n        ctx2[20];\n      if (dirty[0] & /*sidebar*/\n      512)\n        toc_changes.visible = /*sidebar*/\n        ctx2[9] === \"toc\";\n      toc2.$set(toc_changes);\n      if (!current || dirty[0] & /*sidebar*/\n      512) {\n        toggle_class(\n          div3,\n          \"bytemd-hidden\",\n          /*sidebar*/\n          ctx2[9] === false\n        );\n      }\n      const status_changes = {};\n      if (dirty[0] & /*mergedLocale*/\n      4096)\n        status_changes.locale = /*mergedLocale*/\n        ctx2[12];\n      if (dirty[0] & /*overridePreview, split*/\n      2064)\n        status_changes.showSync = !/*overridePreview*/\n        ctx2[4] && /*split*/\n        ctx2[11];\n      if (dirty[0] & /*debouncedValue*/\n      65536)\n        status_changes.value = /*debouncedValue*/\n        ctx2[16];\n      if (dirty[0] & /*syncEnabled*/\n      131072)\n        status_changes.syncEnabled = /*syncEnabled*/\n        ctx2[17];\n      if (dirty[0] & /*value, maxLength*/\n      33)\n        status_changes.islimited = /*value*/\n        ctx2[0].length > /*maxLength*/\n        ctx2[5];\n      status.$set(status_changes);\n      if (!current || dirty[0] & /*split, activeTab*/\n      2304) {\n        toggle_class(\n          div5,\n          \"bytemd-split\",\n          /*split*/\n          ctx2[11] && /*activeTab*/\n          ctx2[8] === false\n        );\n      }\n      if (!current || dirty[0] & /*fullscreen*/\n      32768) {\n        toggle_class(\n          div5,\n          \"bytemd-fullscreen\",\n          /*fullscreen*/\n          ctx2[15]\n        );\n      }\n    },\n    i(local) {\n      if (current)\n        return;\n      transition_in(toolbar.$$.fragment, local);\n      transition_in(if_block);\n      transition_in(help2.$$.fragment, local);\n      transition_in(toc2.$$.fragment, local);\n      transition_in(status.$$.fragment, local);\n      current = true;\n    },\n    o(local) {\n      transition_out(toolbar.$$.fragment, local);\n      transition_out(if_block);\n      transition_out(help2.$$.fragment, local);\n      transition_out(toc2.$$.fragment, local);\n      transition_out(status.$$.fragment, local);\n      current = false;\n    },\n    d(detaching) {\n      if (detaching)\n        detach(div5);\n      destroy_component(toolbar);\n      ctx[34](null);\n      if (if_block)\n        if_block.d();\n      ctx[36](null);\n      destroy_component(help2);\n      destroy_component(toc2);\n      destroy_component(status);\n      ctx[42](null);\n      mounted = false;\n      run_all(dispose);\n    }\n  };\n}\nfunction instance($$self, $$props, $$invalidate) {\n  let mergedLocale;\n  let actions;\n  let split;\n  let styles;\n  let context;\n  let { value = \"\" } = $$props;\n  let { plugins = [] } = $$props;\n  let { sanitize = void 0 } = $$props;\n  let { remarkRehype: remarkRehype2 = void 0 } = $$props;\n  let { mode = \"auto\" } = $$props;\n  let { previewDebounce = 300 } = $$props;\n  let { placeholder = void 0 } = $$props;\n  let { editorConfig = void 0 } = $$props;\n  let { locale = void 0 } = $$props;\n  let { uploadImages = void 0 } = $$props;\n  let { overridePreview = void 0 } = $$props;\n  let { maxLength = Infinity } = $$props;\n  const dispatch = createEventDispatcher();\n  let root;\n  let editorEl;\n  let previewEl;\n  let containerWidth = Infinity;\n  let codemirror;\n  let editor;\n  let activeTab;\n  let fullscreen2 = false;\n  let sidebar = false;\n  let cbs = [];\n  let keyMap = {};\n  function on() {\n    cbs = plugins.map((p) => {\n      var _a;\n      return (_a = p.editorEffect) == null ? void 0 : _a.call(p, context);\n    });\n    keyMap = {};\n    actions.leftActions.forEach(({ handler }) => {\n      if ((handler == null ? void 0 : handler.type) === \"action\" && handler.shortcut) {\n        keyMap[handler.shortcut] = () => {\n          handler.click(context);\n        };\n      }\n    });\n    editor.addKeyMap(keyMap);\n  }\n  function off() {\n    cbs.forEach((cb) => cb && cb());\n    editor == null ? void 0 : editor.removeKeyMap(keyMap);\n  }\n  let debouncedValue = value;\n  const setDebouncedValue = (0,lodash_es__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(\n    (value2) => {\n      $$invalidate(16, debouncedValue = value2);\n      overridePreview == null ? void 0 : overridePreview(previewEl, {\n        value: debouncedValue,\n        plugins,\n        sanitize,\n        remarkRehype: remarkRehype2\n      });\n    },\n    previewDebounce\n  );\n  let syncEnabled = true;\n  let editCalled = false;\n  let previewCalled = false;\n  let editPs;\n  let previewPs;\n  let hast = { type: \"root\", children: [] };\n  let vfile;\n  let currentBlockIndex = 0;\n  onMount(async () => {\n    $$invalidate(30, codemirror = createCodeMirror());\n    $$invalidate(7, editor = codemirror(editorEl, {\n      value,\n      mode: \"yaml-frontmatter\",\n      lineWrapping: true,\n      tabSize: 8,\n      indentUnit: 4,\n      extraKeys: {\n        Enter: \"newlineAndIndentContinueMarkdownList\"\n      },\n      ...editorConfig,\n      placeholder\n    }));\n    editor.addKeyMap({\n      Tab: \"indentMore\",\n      \"Shift-Tab\": \"indentLess\"\n    });\n    editor.on(\"change\", () => {\n      dispatch(\"change\", { value: editor.getValue() });\n    });\n    const updateBlockPositions = (0,lodash_es__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(\n      () => {\n        editPs = [];\n        previewPs = [];\n        const scrollInfo = editor.getScrollInfo();\n        const body = previewEl.childNodes[0];\n        if (!(body instanceof HTMLElement))\n          return;\n        const leftNodes = hast.children.filter((v) => v.type === \"element\");\n        const rightNodes = [...body.childNodes].filter((v) => v instanceof HTMLElement);\n        for (let i = 0; i < leftNodes.length; i++) {\n          const leftNode = leftNodes[i];\n          const rightNode = rightNodes[i];\n          if (!leftNode.position) {\n            continue;\n          }\n          const left = editor.heightAtLine(leftNode.position.start.line - 1, \"local\") / (scrollInfo.height - scrollInfo.clientHeight);\n          const right = (rightNode.offsetTop - body.offsetTop) / (previewEl.scrollHeight - previewEl.clientHeight);\n          if (left >= 1 || right >= 1) {\n            break;\n          }\n          editPs.push(left);\n          previewPs.push(right);\n        }\n        editPs.push(1);\n        previewPs.push(1);\n      },\n      1e3\n    );\n    const editorScrollHandler = () => {\n      if (overridePreview)\n        return;\n      if (!syncEnabled)\n        return;\n      if (previewCalled) {\n        previewCalled = false;\n        return;\n      }\n      updateBlockPositions();\n      const info = editor.getScrollInfo();\n      const leftRatio = info.top / (info.height - info.clientHeight);\n      const startIndex = findStartIndex(leftRatio, editPs);\n      const rightRatio = (leftRatio - editPs[startIndex]) * (previewPs[startIndex + 1] - previewPs[startIndex]) / (editPs[startIndex + 1] - editPs[startIndex]) + previewPs[startIndex];\n      previewEl.scrollTo(0, rightRatio * (previewEl.scrollHeight - previewEl.clientHeight));\n      editCalled = true;\n    };\n    const previewScrollHandler = () => {\n      if (overridePreview)\n        return;\n      updateBlockPositions();\n      $$invalidate(20, currentBlockIndex = findStartIndex(previewEl.scrollTop / (previewEl.scrollHeight - previewEl.offsetHeight), previewPs));\n      if (!syncEnabled)\n        return;\n      if (editCalled) {\n        editCalled = false;\n        return;\n      }\n      const rightRatio = previewEl.scrollTop / (previewEl.scrollHeight - previewEl.clientHeight);\n      const startIndex = findStartIndex(rightRatio, previewPs);\n      const leftRatio = (rightRatio - previewPs[startIndex]) * (editPs[startIndex + 1] - editPs[startIndex]) / (previewPs[startIndex + 1] - previewPs[startIndex]) + editPs[startIndex];\n      if (isNaN(leftRatio)) {\n        return;\n      }\n      const info = editor.getScrollInfo();\n      editor.scrollTo(0, leftRatio * (info.height - info.clientHeight));\n      previewCalled = true;\n    };\n    editor.on(\"scroll\", editorScrollHandler);\n    previewEl.addEventListener(\"scroll\", previewScrollHandler, { passive: true });\n    const handleImages = async (e, itemList) => {\n      if (!uploadImages)\n        return;\n      const files = Array.from(itemList != null ? itemList : []).map((item) => {\n        if (item.type.startsWith(\"image/\")) {\n          return item.getAsFile();\n        }\n      }).filter((f) => f != null);\n      if (files.length) {\n        e.preventDefault();\n        await handleImageUpload(context, uploadImages, files);\n      }\n    };\n    editor.on(\"drop\", async (_, e) => {\n      var _a;\n      handleImages(e, (_a = e.dataTransfer) == null ? void 0 : _a.items);\n    });\n    editor.on(\"paste\", async (_, e) => {\n      var _a;\n      handleImages(e, (_a = e.clipboardData) == null ? void 0 : _a.items);\n    });\n    new ResizeObserver((entries) => {\n      $$invalidate(29, containerWidth = entries[0].contentRect.width);\n    }).observe(root, {\n      box: \"border-box\"\n      // console.log(containerWidth);\n    });\n  });\n  onDestroy(off);\n  const key_handler = (e) => {\n    editor.setOption(\"keyMap\", e.detail);\n    editor.focus();\n  };\n  const tab_handler = (e) => {\n    const v = e.detail;\n    if (split) {\n      $$invalidate(8, activeTab = activeTab === v ? false : v);\n    } else {\n      $$invalidate(8, activeTab = v);\n    }\n    if (activeTab === \"write\") {\n      tick().then(() => {\n        editor && editor.focus();\n      });\n    }\n    if (v === \"write\") {\n      tick().then(() => {\n        editor && editor.setSize(null, null);\n      });\n    }\n  };\n  const click_handler = (e) => {\n    switch (e.detail) {\n      case \"fullscreen\":\n        $$invalidate(15, fullscreen2 = !fullscreen2);\n        break;\n      case \"help\":\n        $$invalidate(9, sidebar = sidebar === \"help\" ? false : \"help\");\n        break;\n      case \"toc\":\n        $$invalidate(9, sidebar = sidebar === \"toc\" ? false : \"toc\");\n        break;\n    }\n  };\n  function div0_binding($$value) {\n    binding_callbacks[$$value ? \"unshift\" : \"push\"](() => {\n      editorEl = $$value;\n      $$invalidate(13, editorEl);\n    });\n  }\n  const hast_handler = (e) => {\n    $$invalidate(18, hast = e.detail.hast);\n    $$invalidate(19, vfile = e.detail.file);\n  };\n  function div1_binding($$value) {\n    binding_callbacks[$$value ? \"unshift\" : \"push\"](() => {\n      previewEl = $$value;\n      $$invalidate(14, previewEl);\n    });\n  }\n  const click_handler_1 = () => {\n    $$invalidate(9, sidebar = false);\n  };\n  const keydown_handler = (e) => {\n    if ([\"Enter\", \"Space\"].includes(e.code)) {\n      $$invalidate(9, sidebar = false);\n    }\n  };\n  const click_handler_2 = (e) => {\n    const headings = previewEl.querySelectorAll(\"h1,h2,h3,h4,h5,h6\");\n    headings[e.detail].scrollIntoView();\n  };\n  const sync_handler = (e) => {\n    $$invalidate(17, syncEnabled = e.detail);\n  };\n  const top_handler = () => {\n    editor.scrollTo(null, 0);\n    previewEl.scrollTo({ top: 0 });\n  };\n  function div5_binding($$value) {\n    binding_callbacks[$$value ? \"unshift\" : \"push\"](() => {\n      root = $$value;\n      $$invalidate(6, root);\n    });\n  }\n  $$self.$$set = ($$props2) => {\n    if (\"value\" in $$props2)\n      $$invalidate(0, value = $$props2.value);\n    if (\"plugins\" in $$props2)\n      $$invalidate(1, plugins = $$props2.plugins);\n    if (\"sanitize\" in $$props2)\n      $$invalidate(2, sanitize = $$props2.sanitize);\n    if (\"remarkRehype\" in $$props2)\n      $$invalidate(3, remarkRehype2 = $$props2.remarkRehype);\n    if (\"mode\" in $$props2)\n      $$invalidate(23, mode = $$props2.mode);\n    if (\"previewDebounce\" in $$props2)\n      $$invalidate(24, previewDebounce = $$props2.previewDebounce);\n    if (\"placeholder\" in $$props2)\n      $$invalidate(25, placeholder = $$props2.placeholder);\n    if (\"editorConfig\" in $$props2)\n      $$invalidate(26, editorConfig = $$props2.editorConfig);\n    if (\"locale\" in $$props2)\n      $$invalidate(27, locale = $$props2.locale);\n    if (\"uploadImages\" in $$props2)\n      $$invalidate(28, uploadImages = $$props2.uploadImages);\n    if (\"overridePreview\" in $$props2)\n      $$invalidate(4, overridePreview = $$props2.overridePreview);\n    if (\"maxLength\" in $$props2)\n      $$invalidate(5, maxLength = $$props2.maxLength);\n  };\n  $$self.$$.update = () => {\n    if ($$self.$$.dirty[0] & /*locale*/\n    134217728) {\n      $$invalidate(12, mergedLocale = { ...en, ...locale });\n    }\n    if ($$self.$$.dirty[0] & /*mergedLocale, plugins, uploadImages*/\n    268439554) {\n      $$invalidate(21, actions = getBuiltinActions(mergedLocale, plugins, uploadImages));\n    }\n    if ($$self.$$.dirty[0] & /*mode, containerWidth*/\n    545259520) {\n      $$invalidate(11, split = mode === \"split\" || mode === \"auto\" && containerWidth >= 800);\n    }\n    if ($$self.$$.dirty[0] & /*split*/\n    2048) {\n      ((_) => {\n        if (split)\n          $$invalidate(8, activeTab = false);\n      })();\n    }\n    if ($$self.$$.dirty[0] & /*split, activeTab, sidebar*/\n    2816) {\n      $$invalidate(22, styles = (() => {\n        let edit;\n        let preview2;\n        if (split && activeTab === false) {\n          if (sidebar) {\n            edit = `width:calc(50% - ${sidebar ? 140 : 0}px)`;\n            preview2 = `width:calc(50% - ${sidebar ? 140 : 0}px)`;\n          } else {\n            edit = \"width:50%\";\n            preview2 = \"width:50%\";\n          }\n        } else if (activeTab === \"preview\") {\n          edit = \"display:none\";\n          preview2 = `width:calc(100% - ${sidebar ? 280 : 0}px)`;\n        } else {\n          edit = `width:calc(100% - ${sidebar ? 280 : 0}px)`;\n          preview2 = \"display:none\";\n        }\n        return { edit, preview: preview2 };\n      })());\n    }\n    if ($$self.$$.dirty[0] & /*codemirror, editor, root*/\n    1073742016) {\n      $$invalidate(10, context = (() => {\n        const context2 = {\n          // @ts-ignore\n          codemirror,\n          editor,\n          root,\n          // @ts-ignore\n          ...createEditorUtils(codemirror, editor)\n        };\n        return context2;\n      })());\n    }\n    if ($$self.$$.dirty[0] & /*value*/\n    1) {\n      setDebouncedValue(value);\n    }\n    if ($$self.$$.dirty[0] & /*editor, value*/\n    129) {\n      if (editor && value !== editor.getValue()) {\n        editor.setValue(value);\n      }\n    }\n    if ($$self.$$.dirty[0] & /*editor, plugins*/\n    130) {\n      if (editor && plugins) {\n        off();\n        tick().then(() => {\n          on();\n        });\n      }\n    }\n  };\n  return [\n    value,\n    plugins,\n    sanitize,\n    remarkRehype2,\n    overridePreview,\n    maxLength,\n    root,\n    editor,\n    activeTab,\n    sidebar,\n    context,\n    split,\n    mergedLocale,\n    editorEl,\n    previewEl,\n    fullscreen2,\n    debouncedValue,\n    syncEnabled,\n    hast,\n    vfile,\n    currentBlockIndex,\n    actions,\n    styles,\n    mode,\n    previewDebounce,\n    placeholder,\n    editorConfig,\n    locale,\n    uploadImages,\n    containerWidth,\n    codemirror,\n    key_handler,\n    tab_handler,\n    click_handler,\n    div0_binding,\n    hast_handler,\n    div1_binding,\n    click_handler_1,\n    keydown_handler,\n    click_handler_2,\n    sync_handler,\n    top_handler,\n    div5_binding\n  ];\n}\nclass Editor extends SvelteComponent {\n  constructor(options) {\n    super();\n    init(\n      this,\n      options,\n      instance,\n      create_fragment,\n      not_equal,\n      {\n        value: 0,\n        plugins: 1,\n        sanitize: 2,\n        remarkRehype: 3,\n        mode: 23,\n        previewDebounce: 24,\n        placeholder: 25,\n        editorConfig: 26,\n        locale: 27,\n        uploadImages: 28,\n        overridePreview: 4,\n        maxLength: 5\n      },\n      null,\n      [-1, -1]\n    );\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytemd/dist/index.mjs\n");

/***/ })

};
;